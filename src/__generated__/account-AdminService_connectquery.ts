// @generated by protoc-gen-connect-query v0.6.0 with parameter "target=ts,import_extension=.ts"
// @generated from file account.proto (package account, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AdminCreateSourceRequest, AdminCreateTokenRequest, AdminDeleteSourceRequest, AdminGetAccountRequest, AdminGetSourceRequest, AdminKeepaliveSourcesRequest, AdminListSourcesRequest, AdminUpdateSourceRequest, CreateAccountRequest, CreateAccountResponse, CreateSourceResponse, CreateTokenResponse, DeleteAccountRequest, DeleteAccountResponse, DeleteSourceResponse, GetAccountResponse, GetSourceResponse, KeepaliveSourcesResponse, ListAccountsRequest, ListAccountsResponse, ListSourcesResponse, UpdateSourceResponse } from "./account_pb.ts";
import { MethodKind } from "@bufbuild/protobuf";
import { createQueryService, createUnaryHooks, UnaryFunctionsWithHooks } from "@connectrpc/connect-query";

export const typeName = "account.AdminService";

/**
 * The admin service allows users with Admin privileges to any account. Many if
 * the RPCs in this service mirror RPCs in the ManagementService, but allow the
 * user to specfy an account to operate on, rather than using the account that
 * the user belongs to.
 *
 * @generated from service account.AdminService
 */
export const AdminService = {
  typeName: "account.AdminService",
  methods: {
    /**
     * Lists the details of all NATS Accounts
     *
     * @generated from rpc account.AdminService.ListAccounts
     */
    listAccounts: {
      name: "ListAccounts",
      I: ListAccountsRequest,
      O: ListAccountsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new account, public_nkey will be autogenerated
     *
     * @generated from rpc account.AdminService.CreateAccount
     */
    createAccount: {
      name: "CreateAccount",
      I: CreateAccountRequest,
      O: CreateAccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get the details of a given account
     *
     * @generated from rpc account.AdminService.GetAccount
     */
    getAccount: {
      name: "GetAccount",
      I: AdminGetAccountRequest,
      O: GetAccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Deletes an account
     *
     * @generated from rpc account.AdminService.DeleteAccount
     */
    deleteAccount: {
      name: "DeleteAccount",
      I: DeleteAccountRequest,
      O: DeleteAccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Lists all sources within the closen account
     *
     * @generated from rpc account.AdminService.ListSources
     */
    listSources: {
      name: "ListSources",
      I: AdminListSourcesRequest,
      O: ListSourcesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new source within the closen account
     *
     * @generated from rpc account.AdminService.CreateSource
     */
    createSource: {
      name: "CreateSource",
      I: AdminCreateSourceRequest,
      O: CreateSourceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get the details of a source within the closen account
     *
     * @generated from rpc account.AdminService.GetSource
     */
    getSource: {
      name: "GetSource",
      I: AdminGetSourceRequest,
      O: GetSourceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update the details of a source within the closen account
     *
     * @generated from rpc account.AdminService.UpdateSource
     */
    updateSource: {
      name: "UpdateSource",
      I: AdminUpdateSourceRequest,
      O: UpdateSourceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Deletes a source from a closen account
     *
     * @generated from rpc account.AdminService.DeleteSource
     */
    deleteSource: {
      name: "DeleteSource",
      I: AdminDeleteSourceRequest,
      O: DeleteSourceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Updates sources to keep them running in the background. This can be used
     * to add explicit action, when the built-in keepalives are not sufficient.
     *
     * @generated from rpc account.AdminService.KeepaliveSources
     */
    keepaliveSources: {
      name: "KeepaliveSources",
      I: AdminKeepaliveSourcesRequest,
      O: KeepaliveSourcesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create a new NATS token for a given public NKey. The user requesting must
     * control the associated private key also in order to connect to NATS as
     * the token is not enough on its own
     *
     * @generated from rpc account.AdminService.CreateToken
     */
    createToken: {
      name: "CreateToken",
      I: AdminCreateTokenRequest,
      O: CreateTokenResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

const $queryService = createQueryService({  service: AdminService,});

/**
 * Lists the details of all NATS Accounts
 *
 * @generated from rpc account.AdminService.ListAccounts
 */
export const listAccounts: UnaryFunctionsWithHooks<ListAccountsRequest, ListAccountsResponse> = {   ...$queryService.listAccounts,  ...createUnaryHooks($queryService.listAccounts)};

/**
 * Creates a new account, public_nkey will be autogenerated
 *
 * @generated from rpc account.AdminService.CreateAccount
 */
export const createAccount: UnaryFunctionsWithHooks<CreateAccountRequest, CreateAccountResponse> = {   ...$queryService.createAccount,  ...createUnaryHooks($queryService.createAccount)};

/**
 * Get the details of a given account
 *
 * @generated from rpc account.AdminService.GetAccount
 */
export const getAccount: UnaryFunctionsWithHooks<AdminGetAccountRequest, GetAccountResponse> = {   ...$queryService.getAccount,  ...createUnaryHooks($queryService.getAccount)};

/**
 * Deletes an account
 *
 * @generated from rpc account.AdminService.DeleteAccount
 */
export const deleteAccount: UnaryFunctionsWithHooks<DeleteAccountRequest, DeleteAccountResponse> = {   ...$queryService.deleteAccount,  ...createUnaryHooks($queryService.deleteAccount)};

/**
 * Lists all sources within the closen account
 *
 * @generated from rpc account.AdminService.ListSources
 */
export const listSources: UnaryFunctionsWithHooks<AdminListSourcesRequest, ListSourcesResponse> = {   ...$queryService.listSources,  ...createUnaryHooks($queryService.listSources)};

/**
 * Creates a new source within the closen account
 *
 * @generated from rpc account.AdminService.CreateSource
 */
export const createSource: UnaryFunctionsWithHooks<AdminCreateSourceRequest, CreateSourceResponse> = {   ...$queryService.createSource,  ...createUnaryHooks($queryService.createSource)};

/**
 * Get the details of a source within the closen account
 *
 * @generated from rpc account.AdminService.GetSource
 */
export const getSource: UnaryFunctionsWithHooks<AdminGetSourceRequest, GetSourceResponse> = {   ...$queryService.getSource,  ...createUnaryHooks($queryService.getSource)};

/**
 * Update the details of a source within the closen account
 *
 * @generated from rpc account.AdminService.UpdateSource
 */
export const updateSource: UnaryFunctionsWithHooks<AdminUpdateSourceRequest, UpdateSourceResponse> = {   ...$queryService.updateSource,  ...createUnaryHooks($queryService.updateSource)};

/**
 * Deletes a source from a closen account
 *
 * @generated from rpc account.AdminService.DeleteSource
 */
export const deleteSource: UnaryFunctionsWithHooks<AdminDeleteSourceRequest, DeleteSourceResponse> = {   ...$queryService.deleteSource,  ...createUnaryHooks($queryService.deleteSource)};

/**
 * Updates sources to keep them running in the background. This can be used
 * to add explicit action, when the built-in keepalives are not sufficient.
 *
 * @generated from rpc account.AdminService.KeepaliveSources
 */
export const keepaliveSources: UnaryFunctionsWithHooks<AdminKeepaliveSourcesRequest, KeepaliveSourcesResponse> = {   ...$queryService.keepaliveSources,  ...createUnaryHooks($queryService.keepaliveSources)};

/**
 * Create a new NATS token for a given public NKey. The user requesting must
 * control the associated private key also in order to connect to NATS as
 * the token is not enough on its own
 *
 * @generated from rpc account.AdminService.CreateToken
 */
export const createToken: UnaryFunctionsWithHooks<AdminCreateTokenRequest, CreateTokenResponse> = {   ...$queryService.createToken,  ...createUnaryHooks($queryService.createToken)};
