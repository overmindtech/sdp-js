// @generated by protoc-gen-connect-query v0.4.0 with parameter "target=ts,import_extension=.ts"
// @generated from file account.proto (package account, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { createQueryService } from "@bufbuild/connect-query";
import { MethodKind } from "@bufbuild/protobuf";
import { CreateSourceRequest, CreateSourceResponse, CreateTokenRequest, CreateTokenResponse, DeleteSourceRequest, DeleteSourceResponse, GetAccountRequest, GetAccountResponse, GetSourceRequest, GetSourceResponse, KeepaliveSourcesRequest, KeepaliveSourcesResponse, ListSourcesRequest, ListSourcesResponse, UpdateSourceRequest, UpdateSourceResponse } from "./account_pb.ts";

export const typeName = "account.ManagementService";

/**
 * Get the details of the account that this user belongs to
 *
 * @generated from rpc account.ManagementService.GetAccount
 */
export const getAccount = createQueryService({
  service: {
    methods: {
      getAccount: {
        name: "GetAccount",
        kind: MethodKind.Unary,
        I: GetAccountRequest,
        O: GetAccountResponse,
      },
    },
    typeName: "account.ManagementService",
  },
}).getAccount;

/**
 * Lists all sources within the user's account
 *
 * @generated from rpc account.ManagementService.ListSources
 */
export const listSources = createQueryService({
  service: {
    methods: {
      listSources: {
        name: "ListSources",
        kind: MethodKind.Unary,
        I: ListSourcesRequest,
        O: ListSourcesResponse,
      },
    },
    typeName: "account.ManagementService",
  },
}).listSources;

/**
 * Creates a new source within the user's account
 *
 * @generated from rpc account.ManagementService.CreateSource
 */
export const createSource = createQueryService({
  service: {
    methods: {
      createSource: {
        name: "CreateSource",
        kind: MethodKind.Unary,
        I: CreateSourceRequest,
        O: CreateSourceResponse,
      },
    },
    typeName: "account.ManagementService",
  },
}).createSource;

/**
 * Get the details of a source
 *
 * @generated from rpc account.ManagementService.GetSource
 */
export const getSource = createQueryService({
  service: {
    methods: {
      getSource: {
        name: "GetSource",
        kind: MethodKind.Unary,
        I: GetSourceRequest,
        O: GetSourceResponse,
      },
    },
    typeName: "account.ManagementService",
  },
}).getSource;

/**
 * Update the details of a source
 *
 * @generated from rpc account.ManagementService.UpdateSource
 */
export const updateSource = createQueryService({
  service: {
    methods: {
      updateSource: {
        name: "UpdateSource",
        kind: MethodKind.Unary,
        I: UpdateSourceRequest,
        O: UpdateSourceResponse,
      },
    },
    typeName: "account.ManagementService",
  },
}).updateSource;

/**
 * Deletes a source from a user's account
 *
 * @generated from rpc account.ManagementService.DeleteSource
 */
export const deleteSource = createQueryService({
  service: {
    methods: {
      deleteSource: {
        name: "DeleteSource",
        kind: MethodKind.Unary,
        I: DeleteSourceRequest,
        O: DeleteSourceResponse,
      },
    },
    typeName: "account.ManagementService",
  },
}).deleteSource;

/**
 * Updates sources to keep them running in the background. This can be used
 * to add explicit action, when the built-in keepalives are not sufficient.
 *
 * @generated from rpc account.ManagementService.KeepaliveSources
 */
export const keepaliveSources = createQueryService({
  service: {
    methods: {
      keepaliveSources: {
        name: "KeepaliveSources",
        kind: MethodKind.Unary,
        I: KeepaliveSourcesRequest,
        O: KeepaliveSourcesResponse,
      },
    },
    typeName: "account.ManagementService",
  },
}).keepaliveSources;

/**
 * Create a new NATS token for a given public NKey. The user requesting must
 * control the associated private key also in order to connect to NATS as
 * the token is not enough on its own
 *
 * @generated from rpc account.ManagementService.CreateToken
 */
export const createToken = createQueryService({
  service: {
    methods: {
      createToken: {
        name: "CreateToken",
        kind: MethodKind.Unary,
        I: CreateTokenRequest,
        O: CreateTokenResponse,
      },
    },
    typeName: "account.ManagementService",
  },
}).createToken;
