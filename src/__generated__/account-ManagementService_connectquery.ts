// @generated by protoc-gen-connect-query v0.6.0 with parameter "target=ts,import_extension=.ts"
// @generated from file account.proto (package account, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateSourceRequest, CreateSourceResponse, CreateTokenRequest, CreateTokenResponse, DeleteSourceRequest, DeleteSourceResponse, GetAccountRequest, GetAccountResponse, GetSourceRequest, GetSourceResponse, KeepaliveSourcesRequest, KeepaliveSourcesResponse, ListSourcesRequest, ListSourcesResponse, UpdateSourceRequest, UpdateSourceResponse } from "./account_pb.ts";
import { MethodKind } from "@bufbuild/protobuf";
import { createQueryService, createUnaryHooks, UnaryFunctionsWithHooks } from "@connectrpc/connect-query";

export const typeName = "account.ManagementService";

/**
 * RPCS to manage the user's account, sources etc. All requests to this API are
 * scoped to that user's account via the
 * `https://api.overmind.tech/account-name` claim in the suppplied token
 *
 * @generated from service account.ManagementService
 */
export const ManagementService = {
  typeName: "account.ManagementService",
  methods: {
    /**
     * Get the details of the account that this user belongs to
     *
     * @generated from rpc account.ManagementService.GetAccount
     */
    getAccount: {
      name: "GetAccount",
      I: GetAccountRequest,
      O: GetAccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Lists all sources within the user's account
     *
     * @generated from rpc account.ManagementService.ListSources
     */
    listSources: {
      name: "ListSources",
      I: ListSourcesRequest,
      O: ListSourcesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new source within the user's account
     *
     * @generated from rpc account.ManagementService.CreateSource
     */
    createSource: {
      name: "CreateSource",
      I: CreateSourceRequest,
      O: CreateSourceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get the details of a source
     *
     * @generated from rpc account.ManagementService.GetSource
     */
    getSource: {
      name: "GetSource",
      I: GetSourceRequest,
      O: GetSourceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update the details of a source
     *
     * @generated from rpc account.ManagementService.UpdateSource
     */
    updateSource: {
      name: "UpdateSource",
      I: UpdateSourceRequest,
      O: UpdateSourceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Deletes a source from a user's account
     *
     * @generated from rpc account.ManagementService.DeleteSource
     */
    deleteSource: {
      name: "DeleteSource",
      I: DeleteSourceRequest,
      O: DeleteSourceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Updates sources to keep them running in the background. This can be used
     * to add explicit action, when the built-in keepalives are not sufficient.
     *
     * @generated from rpc account.ManagementService.KeepaliveSources
     */
    keepaliveSources: {
      name: "KeepaliveSources",
      I: KeepaliveSourcesRequest,
      O: KeepaliveSourcesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create a new NATS token for a given public NKey. The user requesting must
     * control the associated private key also in order to connect to NATS as
     * the token is not enough on its own
     *
     * @generated from rpc account.ManagementService.CreateToken
     */
    createToken: {
      name: "CreateToken",
      I: CreateTokenRequest,
      O: CreateTokenResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

const $queryService = createQueryService({  service: ManagementService,});

/**
 * Get the details of the account that this user belongs to
 *
 * @generated from rpc account.ManagementService.GetAccount
 */
export const getAccount: UnaryFunctionsWithHooks<GetAccountRequest, GetAccountResponse> = {   ...$queryService.getAccount,  ...createUnaryHooks($queryService.getAccount)};

/**
 * Lists all sources within the user's account
 *
 * @generated from rpc account.ManagementService.ListSources
 */
export const listSources: UnaryFunctionsWithHooks<ListSourcesRequest, ListSourcesResponse> = {   ...$queryService.listSources,  ...createUnaryHooks($queryService.listSources)};

/**
 * Creates a new source within the user's account
 *
 * @generated from rpc account.ManagementService.CreateSource
 */
export const createSource: UnaryFunctionsWithHooks<CreateSourceRequest, CreateSourceResponse> = {   ...$queryService.createSource,  ...createUnaryHooks($queryService.createSource)};

/**
 * Get the details of a source
 *
 * @generated from rpc account.ManagementService.GetSource
 */
export const getSource: UnaryFunctionsWithHooks<GetSourceRequest, GetSourceResponse> = {   ...$queryService.getSource,  ...createUnaryHooks($queryService.getSource)};

/**
 * Update the details of a source
 *
 * @generated from rpc account.ManagementService.UpdateSource
 */
export const updateSource: UnaryFunctionsWithHooks<UpdateSourceRequest, UpdateSourceResponse> = {   ...$queryService.updateSource,  ...createUnaryHooks($queryService.updateSource)};

/**
 * Deletes a source from a user's account
 *
 * @generated from rpc account.ManagementService.DeleteSource
 */
export const deleteSource: UnaryFunctionsWithHooks<DeleteSourceRequest, DeleteSourceResponse> = {   ...$queryService.deleteSource,  ...createUnaryHooks($queryService.deleteSource)};

/**
 * Updates sources to keep them running in the background. This can be used
 * to add explicit action, when the built-in keepalives are not sufficient.
 *
 * @generated from rpc account.ManagementService.KeepaliveSources
 */
export const keepaliveSources: UnaryFunctionsWithHooks<KeepaliveSourcesRequest, KeepaliveSourcesResponse> = {   ...$queryService.keepaliveSources,  ...createUnaryHooks($queryService.keepaliveSources)};

/**
 * Create a new NATS token for a given public NKey. The user requesting must
 * control the associated private key also in order to connect to NATS as
 * the token is not enough on its own
 *
 * @generated from rpc account.ManagementService.CreateToken
 */
export const createToken: UnaryFunctionsWithHooks<CreateTokenRequest, CreateTokenResponse> = {   ...$queryService.createToken,  ...createUnaryHooks($queryService.createToken)};
