// @generated by protoc-gen-es v1.5.0 with parameter "target=ts,import_extension=.ts"
// @generated from file account.proto (package account, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum account.SourceStatus
 */
export enum SourceStatus {
  /**
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  STATUS_UNSPECIFIED = 0,

  /**
   * The source is starting or updating
   *
   * @generated from enum value: STATUS_PROGRESSING = 1;
   */
  STATUS_PROGRESSING = 1,

  /**
   * The source is healthy
   *
   * @generated from enum value: STATUS_HEALTHY = 2;
   */
  STATUS_HEALTHY = 2,

  /**
   * The source is unhealthy
   *
   * @generated from enum value: STATUS_UNHEALTHY = 3;
   */
  STATUS_UNHEALTHY = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SourceStatus)
proto3.util.setEnumType(SourceStatus, "account.SourceStatus", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_PROGRESSING" },
  { no: 2, name: "STATUS_HEALTHY" },
  { no: 3, name: "STATUS_UNHEALTHY" },
]);

/**
 * @generated from message account.ListAccountsRequest
 */
export class ListAccountsRequest extends Message<ListAccountsRequest> {
  constructor(data?: PartialMessage<ListAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.ListAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAccountsRequest {
    return new ListAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAccountsRequest {
    return new ListAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAccountsRequest {
    return new ListAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAccountsRequest | PlainMessage<ListAccountsRequest> | undefined, b: ListAccountsRequest | PlainMessage<ListAccountsRequest> | undefined): boolean {
    return proto3.util.equals(ListAccountsRequest, a, b);
  }
}

/**
 * @generated from message account.ListAccountsResponse
 */
export class ListAccountsResponse extends Message<ListAccountsResponse> {
  /**
   * @generated from field: repeated account.Account accounts = 1;
   */
  accounts: Account[] = [];

  constructor(data?: PartialMessage<ListAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.ListAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAccountsResponse {
    return new ListAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAccountsResponse {
    return new ListAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAccountsResponse {
    return new ListAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAccountsResponse | PlainMessage<ListAccountsResponse> | undefined, b: ListAccountsResponse | PlainMessage<ListAccountsResponse> | undefined): boolean {
    return proto3.util.equals(ListAccountsResponse, a, b);
  }
}

/**
 * @generated from message account.CreateAccountRequest
 */
export class CreateAccountRequest extends Message<CreateAccountRequest> {
  /**
   * @generated from field: account.AccountProperties properties = 1;
   */
  properties?: AccountProperties;

  constructor(data?: PartialMessage<CreateAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.CreateAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "properties", kind: "message", T: AccountProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccountRequest {
    return new CreateAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccountRequest {
    return new CreateAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccountRequest {
    return new CreateAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAccountRequest | PlainMessage<CreateAccountRequest> | undefined, b: CreateAccountRequest | PlainMessage<CreateAccountRequest> | undefined): boolean {
    return proto3.util.equals(CreateAccountRequest, a, b);
  }
}

/**
 * @generated from message account.CreateAccountResponse
 */
export class CreateAccountResponse extends Message<CreateAccountResponse> {
  /**
   * @generated from field: account.Account account = 1;
   */
  account?: Account;

  constructor(data?: PartialMessage<CreateAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.CreateAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccountResponse {
    return new CreateAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccountResponse {
    return new CreateAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccountResponse {
    return new CreateAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAccountResponse | PlainMessage<CreateAccountResponse> | undefined, b: CreateAccountResponse | PlainMessage<CreateAccountResponse> | undefined): boolean {
    return proto3.util.equals(CreateAccountResponse, a, b);
  }
}

/**
 * @generated from message account.AdminGetAccountRequest
 */
export class AdminGetAccountRequest extends Message<AdminGetAccountRequest> {
  /**
   * The name of the account to get
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<AdminGetAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.AdminGetAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminGetAccountRequest {
    return new AdminGetAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminGetAccountRequest {
    return new AdminGetAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminGetAccountRequest {
    return new AdminGetAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AdminGetAccountRequest | PlainMessage<AdminGetAccountRequest> | undefined, b: AdminGetAccountRequest | PlainMessage<AdminGetAccountRequest> | undefined): boolean {
    return proto3.util.equals(AdminGetAccountRequest, a, b);
  }
}

/**
 * @generated from message account.DeleteAccountRequest
 */
export class DeleteAccountRequest extends Message<DeleteAccountRequest> {
  /**
   * The name of the account to delete
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.DeleteAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccountRequest {
    return new DeleteAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccountRequest {
    return new DeleteAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccountRequest {
    return new DeleteAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccountRequest | PlainMessage<DeleteAccountRequest> | undefined, b: DeleteAccountRequest | PlainMessage<DeleteAccountRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAccountRequest, a, b);
  }
}

/**
 * @generated from message account.DeleteAccountResponse
 */
export class DeleteAccountResponse extends Message<DeleteAccountResponse> {
  constructor(data?: PartialMessage<DeleteAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.DeleteAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccountResponse {
    return new DeleteAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccountResponse {
    return new DeleteAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccountResponse {
    return new DeleteAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccountResponse | PlainMessage<DeleteAccountResponse> | undefined, b: DeleteAccountResponse | PlainMessage<DeleteAccountResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAccountResponse, a, b);
  }
}

/**
 * @generated from message account.AdminListSourcesRequest
 */
export class AdminListSourcesRequest extends Message<AdminListSourcesRequest> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: account.ListSourcesRequest request = 2;
   */
  request?: ListSourcesRequest;

  constructor(data?: PartialMessage<AdminListSourcesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.AdminListSourcesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request", kind: "message", T: ListSourcesRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminListSourcesRequest {
    return new AdminListSourcesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminListSourcesRequest {
    return new AdminListSourcesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminListSourcesRequest {
    return new AdminListSourcesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AdminListSourcesRequest | PlainMessage<AdminListSourcesRequest> | undefined, b: AdminListSourcesRequest | PlainMessage<AdminListSourcesRequest> | undefined): boolean {
    return proto3.util.equals(AdminListSourcesRequest, a, b);
  }
}

/**
 * @generated from message account.AdminCreateSourceRequest
 */
export class AdminCreateSourceRequest extends Message<AdminCreateSourceRequest> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: account.CreateSourceRequest request = 2;
   */
  request?: CreateSourceRequest;

  constructor(data?: PartialMessage<AdminCreateSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.AdminCreateSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request", kind: "message", T: CreateSourceRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminCreateSourceRequest {
    return new AdminCreateSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminCreateSourceRequest {
    return new AdminCreateSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminCreateSourceRequest {
    return new AdminCreateSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AdminCreateSourceRequest | PlainMessage<AdminCreateSourceRequest> | undefined, b: AdminCreateSourceRequest | PlainMessage<AdminCreateSourceRequest> | undefined): boolean {
    return proto3.util.equals(AdminCreateSourceRequest, a, b);
  }
}

/**
 * @generated from message account.AdminGetSourceRequest
 */
export class AdminGetSourceRequest extends Message<AdminGetSourceRequest> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: account.GetSourceRequest request = 2;
   */
  request?: GetSourceRequest;

  constructor(data?: PartialMessage<AdminGetSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.AdminGetSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request", kind: "message", T: GetSourceRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminGetSourceRequest {
    return new AdminGetSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminGetSourceRequest {
    return new AdminGetSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminGetSourceRequest {
    return new AdminGetSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AdminGetSourceRequest | PlainMessage<AdminGetSourceRequest> | undefined, b: AdminGetSourceRequest | PlainMessage<AdminGetSourceRequest> | undefined): boolean {
    return proto3.util.equals(AdminGetSourceRequest, a, b);
  }
}

/**
 * @generated from message account.AdminUpdateSourceRequest
 */
export class AdminUpdateSourceRequest extends Message<AdminUpdateSourceRequest> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: account.UpdateSourceRequest request = 2;
   */
  request?: UpdateSourceRequest;

  constructor(data?: PartialMessage<AdminUpdateSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.AdminUpdateSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request", kind: "message", T: UpdateSourceRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminUpdateSourceRequest {
    return new AdminUpdateSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminUpdateSourceRequest {
    return new AdminUpdateSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminUpdateSourceRequest {
    return new AdminUpdateSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AdminUpdateSourceRequest | PlainMessage<AdminUpdateSourceRequest> | undefined, b: AdminUpdateSourceRequest | PlainMessage<AdminUpdateSourceRequest> | undefined): boolean {
    return proto3.util.equals(AdminUpdateSourceRequest, a, b);
  }
}

/**
 * @generated from message account.AdminDeleteSourceRequest
 */
export class AdminDeleteSourceRequest extends Message<AdminDeleteSourceRequest> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: account.DeleteSourceRequest request = 2;
   */
  request?: DeleteSourceRequest;

  constructor(data?: PartialMessage<AdminDeleteSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.AdminDeleteSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request", kind: "message", T: DeleteSourceRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminDeleteSourceRequest {
    return new AdminDeleteSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminDeleteSourceRequest {
    return new AdminDeleteSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminDeleteSourceRequest {
    return new AdminDeleteSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AdminDeleteSourceRequest | PlainMessage<AdminDeleteSourceRequest> | undefined, b: AdminDeleteSourceRequest | PlainMessage<AdminDeleteSourceRequest> | undefined): boolean {
    return proto3.util.equals(AdminDeleteSourceRequest, a, b);
  }
}

/**
 * @generated from message account.AdminKeepaliveSourcesRequest
 */
export class AdminKeepaliveSourcesRequest extends Message<AdminKeepaliveSourcesRequest> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: account.KeepaliveSourcesRequest request = 2;
   */
  request?: KeepaliveSourcesRequest;

  constructor(data?: PartialMessage<AdminKeepaliveSourcesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.AdminKeepaliveSourcesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request", kind: "message", T: KeepaliveSourcesRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminKeepaliveSourcesRequest {
    return new AdminKeepaliveSourcesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminKeepaliveSourcesRequest {
    return new AdminKeepaliveSourcesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminKeepaliveSourcesRequest {
    return new AdminKeepaliveSourcesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AdminKeepaliveSourcesRequest | PlainMessage<AdminKeepaliveSourcesRequest> | undefined, b: AdminKeepaliveSourcesRequest | PlainMessage<AdminKeepaliveSourcesRequest> | undefined): boolean {
    return proto3.util.equals(AdminKeepaliveSourcesRequest, a, b);
  }
}

/**
 * @generated from message account.AdminCreateTokenRequest
 */
export class AdminCreateTokenRequest extends Message<AdminCreateTokenRequest> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: account.CreateTokenRequest request = 2;
   */
  request?: CreateTokenRequest;

  constructor(data?: PartialMessage<AdminCreateTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.AdminCreateTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request", kind: "message", T: CreateTokenRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminCreateTokenRequest {
    return new AdminCreateTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminCreateTokenRequest {
    return new AdminCreateTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminCreateTokenRequest {
    return new AdminCreateTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AdminCreateTokenRequest | PlainMessage<AdminCreateTokenRequest> | undefined, b: AdminCreateTokenRequest | PlainMessage<AdminCreateTokenRequest> | undefined): boolean {
    return proto3.util.equals(AdminCreateTokenRequest, a, b);
  }
}

/**
 * @generated from message account.Source
 */
export class Source extends Message<Source> {
  /**
   * @generated from field: account.SourceMetadata metadata = 1;
   */
  metadata?: SourceMetadata;

  /**
   * @generated from field: account.SourceProperties properties = 2;
   */
  properties?: SourceProperties;

  constructor(data?: PartialMessage<Source>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.Source";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: SourceMetadata },
    { no: 2, name: "properties", kind: "message", T: SourceProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Source {
    return new Source().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Source {
    return new Source().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Source {
    return new Source().fromJsonString(jsonString, options);
  }

  static equals(a: Source | PlainMessage<Source> | undefined, b: Source | PlainMessage<Source> | undefined): boolean {
    return proto3.util.equals(Source, a, b);
  }
}

/**
 * @generated from message account.SourceMetadata
 */
export class SourceMetadata extends Message<SourceMetadata> {
  /**
   * TOOD: Chnage to ID along with everything else
   *
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  /**
   * The name of the nats JWT that has been generated for this source
   *
   * @generated from field: string TokenName = 2;
   */
  TokenName = "";

  /**
   * When the NATS JWT expires (unix time)
   *
   * @generated from field: google.protobuf.Timestamp TokenExpiry = 4;
   */
  TokenExpiry?: Timestamp;

  /**
   * The public NKey associated with the NATS JWT
   *
   * @generated from field: string PublicNkey = 5;
   */
  PublicNkey = "";

  /**
   * Status of the source
   *
   * @generated from field: account.SourceStatus Status = 9;
   */
  Status = SourceStatus.STATUS_UNSPECIFIED;

  /**
   * The error message if the source is unhealthy
   *
   * @generated from field: string Error = 10;
   */
  Error = "";

  constructor(data?: PartialMessage<SourceMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.SourceMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "TokenName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "TokenExpiry", kind: "message", T: Timestamp },
    { no: 5, name: "PublicNkey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "Status", kind: "enum", T: proto3.getEnumType(SourceStatus) },
    { no: 10, name: "Error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SourceMetadata {
    return new SourceMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SourceMetadata {
    return new SourceMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SourceMetadata {
    return new SourceMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: SourceMetadata | PlainMessage<SourceMetadata> | undefined, b: SourceMetadata | PlainMessage<SourceMetadata> | undefined): boolean {
    return proto3.util.equals(SourceMetadata, a, b);
  }
}

/**
 * A source that is capable of discovering items
 *
 * @generated from message account.SourceProperties
 */
export class SourceProperties extends Message<SourceProperties> {
  /**
   * The descriptive name of the source
   *
   * @generated from field: string DescriptiveName = 1;
   */
  DescriptiveName = "";

  /**
   * What source to configure. Currently either "stdlib" or "aws"
   *
   * @generated from field: string Type = 2;
   */
  Type = "";

  /**
   * Config for this source. See the source documentation for what
   * source-specific config is available/required. This will be supplied
   * directly to viper via a config file at `/etc/srcman/config/source.yaml`
   *
   * @generated from field: google.protobuf.Struct Config = 3;
   */
  Config?: Struct;

  /**
   * Additional config options that should be passed to the source. The keys
   * of this object should be file names, and the values should be their
   * content. These files will be made available to the source at runtime.
   * Check the source's documentation for what to configure here if required
   *
   * @generated from field: google.protobuf.Struct AdditionalConfig = 4;
   */
  AdditionalConfig?: Struct;

  constructor(data?: PartialMessage<SourceProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.SourceProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "DescriptiveName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Config", kind: "message", T: Struct },
    { no: 4, name: "AdditionalConfig", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SourceProperties {
    return new SourceProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SourceProperties {
    return new SourceProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SourceProperties {
    return new SourceProperties().fromJsonString(jsonString, options);
  }

  static equals(a: SourceProperties | PlainMessage<SourceProperties> | undefined, b: SourceProperties | PlainMessage<SourceProperties> | undefined): boolean {
    return proto3.util.equals(SourceProperties, a, b);
  }
}

/**
 * @generated from message account.Account
 */
export class Account extends Message<Account> {
  /**
   * @generated from field: account.AccountMetadata metadata = 1;
   */
  metadata?: AccountMetadata;

  /**
   * @generated from field: account.AccountProperties properties = 2;
   */
  properties?: AccountProperties;

  constructor(data?: PartialMessage<Account>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.Account";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: AccountMetadata },
    { no: 2, name: "properties", kind: "message", T: AccountProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Account {
    return new Account().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJsonString(jsonString, options);
  }

  static equals(a: Account | PlainMessage<Account> | undefined, b: Account | PlainMessage<Account> | undefined): boolean {
    return proto3.util.equals(Account, a, b);
  }
}

/**
 * @generated from message account.AccountMetadata
 */
export class AccountMetadata extends Message<AccountMetadata> {
  /**
   * The public Nkey which signs all NATS "user" tokens
   *
   * @generated from field: string PublicNkey = 2;
   */
  PublicNkey = "";

  constructor(data?: PartialMessage<AccountMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.AccountMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "PublicNkey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountMetadata {
    return new AccountMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountMetadata {
    return new AccountMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountMetadata {
    return new AccountMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: AccountMetadata | PlainMessage<AccountMetadata> | undefined, b: AccountMetadata | PlainMessage<AccountMetadata> | undefined): boolean {
    return proto3.util.equals(AccountMetadata, a, b);
  }
}

/**
 * @generated from message account.AccountProperties
 */
export class AccountProperties extends Message<AccountProperties> {
  /**
   * The name of the account
   *
   * @generated from field: string Name = 1;
   */
  Name = "";

  constructor(data?: PartialMessage<AccountProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.AccountProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountProperties {
    return new AccountProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountProperties {
    return new AccountProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountProperties {
    return new AccountProperties().fromJsonString(jsonString, options);
  }

  static equals(a: AccountProperties | PlainMessage<AccountProperties> | undefined, b: AccountProperties | PlainMessage<AccountProperties> | undefined): boolean {
    return proto3.util.equals(AccountProperties, a, b);
  }
}

/**
 * @generated from message account.GetAccountRequest
 */
export class GetAccountRequest extends Message<GetAccountRequest> {
  constructor(data?: PartialMessage<GetAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.GetAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountRequest {
    return new GetAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountRequest {
    return new GetAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountRequest {
    return new GetAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountRequest | PlainMessage<GetAccountRequest> | undefined, b: GetAccountRequest | PlainMessage<GetAccountRequest> | undefined): boolean {
    return proto3.util.equals(GetAccountRequest, a, b);
  }
}

/**
 * @generated from message account.GetAccountResponse
 */
export class GetAccountResponse extends Message<GetAccountResponse> {
  /**
   * @generated from field: account.Account account = 1;
   */
  account?: Account;

  constructor(data?: PartialMessage<GetAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.GetAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountResponse {
    return new GetAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountResponse {
    return new GetAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountResponse {
    return new GetAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountResponse | PlainMessage<GetAccountResponse> | undefined, b: GetAccountResponse | PlainMessage<GetAccountResponse> | undefined): boolean {
    return proto3.util.equals(GetAccountResponse, a, b);
  }
}

/**
 * @generated from message account.ListSourcesRequest
 */
export class ListSourcesRequest extends Message<ListSourcesRequest> {
  constructor(data?: PartialMessage<ListSourcesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.ListSourcesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSourcesRequest {
    return new ListSourcesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSourcesRequest {
    return new ListSourcesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSourcesRequest {
    return new ListSourcesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSourcesRequest | PlainMessage<ListSourcesRequest> | undefined, b: ListSourcesRequest | PlainMessage<ListSourcesRequest> | undefined): boolean {
    return proto3.util.equals(ListSourcesRequest, a, b);
  }
}

/**
 * @generated from message account.ListSourcesResponse
 */
export class ListSourcesResponse extends Message<ListSourcesResponse> {
  /**
   * @generated from field: repeated account.Source Sources = 1;
   */
  Sources: Source[] = [];

  constructor(data?: PartialMessage<ListSourcesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.ListSourcesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Sources", kind: "message", T: Source, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSourcesResponse {
    return new ListSourcesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSourcesResponse {
    return new ListSourcesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSourcesResponse {
    return new ListSourcesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSourcesResponse | PlainMessage<ListSourcesResponse> | undefined, b: ListSourcesResponse | PlainMessage<ListSourcesResponse> | undefined): boolean {
    return proto3.util.equals(ListSourcesResponse, a, b);
  }
}

/**
 * @generated from message account.CreateSourceRequest
 */
export class CreateSourceRequest extends Message<CreateSourceRequest> {
  /**
   * @generated from field: account.SourceProperties properties = 1;
   */
  properties?: SourceProperties;

  constructor(data?: PartialMessage<CreateSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.CreateSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "properties", kind: "message", T: SourceProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSourceRequest {
    return new CreateSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSourceRequest {
    return new CreateSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSourceRequest {
    return new CreateSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSourceRequest | PlainMessage<CreateSourceRequest> | undefined, b: CreateSourceRequest | PlainMessage<CreateSourceRequest> | undefined): boolean {
    return proto3.util.equals(CreateSourceRequest, a, b);
  }
}

/**
 * @generated from message account.CreateSourceResponse
 */
export class CreateSourceResponse extends Message<CreateSourceResponse> {
  /**
   * @generated from field: account.Source source = 1;
   */
  source?: Source;

  constructor(data?: PartialMessage<CreateSourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.CreateSourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "message", T: Source },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSourceResponse {
    return new CreateSourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSourceResponse {
    return new CreateSourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSourceResponse {
    return new CreateSourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSourceResponse | PlainMessage<CreateSourceResponse> | undefined, b: CreateSourceResponse | PlainMessage<CreateSourceResponse> | undefined): boolean {
    return proto3.util.equals(CreateSourceResponse, a, b);
  }
}

/**
 * @generated from message account.GetSourceRequest
 */
export class GetSourceRequest extends Message<GetSourceRequest> {
  /**
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<GetSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.GetSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSourceRequest {
    return new GetSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSourceRequest {
    return new GetSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSourceRequest {
    return new GetSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSourceRequest | PlainMessage<GetSourceRequest> | undefined, b: GetSourceRequest | PlainMessage<GetSourceRequest> | undefined): boolean {
    return proto3.util.equals(GetSourceRequest, a, b);
  }
}

/**
 * @generated from message account.GetSourceResponse
 */
export class GetSourceResponse extends Message<GetSourceResponse> {
  /**
   * @generated from field: account.Source source = 1;
   */
  source?: Source;

  constructor(data?: PartialMessage<GetSourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.GetSourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "message", T: Source },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSourceResponse {
    return new GetSourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSourceResponse {
    return new GetSourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSourceResponse {
    return new GetSourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSourceResponse | PlainMessage<GetSourceResponse> | undefined, b: GetSourceResponse | PlainMessage<GetSourceResponse> | undefined): boolean {
    return proto3.util.equals(GetSourceResponse, a, b);
  }
}

/**
 * @generated from message account.UpdateSourceRequest
 */
export class UpdateSourceRequest extends Message<UpdateSourceRequest> {
  /**
   * ID of the source to update
   *
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  /**
   * Properties to update
   *
   * @generated from field: account.SourceProperties properties = 2;
   */
  properties?: SourceProperties;

  constructor(data?: PartialMessage<UpdateSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.UpdateSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "properties", kind: "message", T: SourceProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSourceRequest {
    return new UpdateSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSourceRequest {
    return new UpdateSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSourceRequest {
    return new UpdateSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSourceRequest | PlainMessage<UpdateSourceRequest> | undefined, b: UpdateSourceRequest | PlainMessage<UpdateSourceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSourceRequest, a, b);
  }
}

/**
 * @generated from message account.UpdateSourceResponse
 */
export class UpdateSourceResponse extends Message<UpdateSourceResponse> {
  /**
   * @generated from field: account.Source source = 1;
   */
  source?: Source;

  constructor(data?: PartialMessage<UpdateSourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.UpdateSourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "message", T: Source },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSourceResponse {
    return new UpdateSourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSourceResponse {
    return new UpdateSourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSourceResponse {
    return new UpdateSourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSourceResponse | PlainMessage<UpdateSourceResponse> | undefined, b: UpdateSourceResponse | PlainMessage<UpdateSourceResponse> | undefined): boolean {
    return proto3.util.equals(UpdateSourceResponse, a, b);
  }
}

/**
 * @generated from message account.DeleteSourceRequest
 */
export class DeleteSourceRequest extends Message<DeleteSourceRequest> {
  /**
   * ID if the source to delete
   *
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<DeleteSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.DeleteSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSourceRequest {
    return new DeleteSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSourceRequest {
    return new DeleteSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSourceRequest {
    return new DeleteSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSourceRequest | PlainMessage<DeleteSourceRequest> | undefined, b: DeleteSourceRequest | PlainMessage<DeleteSourceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSourceRequest, a, b);
  }
}

/**
 * @generated from message account.DeleteSourceResponse
 */
export class DeleteSourceResponse extends Message<DeleteSourceResponse> {
  constructor(data?: PartialMessage<DeleteSourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.DeleteSourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSourceResponse {
    return new DeleteSourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSourceResponse {
    return new DeleteSourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSourceResponse {
    return new DeleteSourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSourceResponse | PlainMessage<DeleteSourceResponse> | undefined, b: DeleteSourceResponse | PlainMessage<DeleteSourceResponse> | undefined): boolean {
    return proto3.util.equals(DeleteSourceResponse, a, b);
  }
}

/**
 * @generated from message account.KeepaliveSourcesRequest
 */
export class KeepaliveSourcesRequest extends Message<KeepaliveSourcesRequest> {
  /**
   * Set to true to have the API call wait until the source is up and healthy
   *
   * @generated from field: bool waitForHealthy = 1;
   */
  waitForHealthy = false;

  constructor(data?: PartialMessage<KeepaliveSourcesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.KeepaliveSourcesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "waitForHealthy", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeepaliveSourcesRequest {
    return new KeepaliveSourcesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeepaliveSourcesRequest {
    return new KeepaliveSourcesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeepaliveSourcesRequest {
    return new KeepaliveSourcesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: KeepaliveSourcesRequest | PlainMessage<KeepaliveSourcesRequest> | undefined, b: KeepaliveSourcesRequest | PlainMessage<KeepaliveSourcesRequest> | undefined): boolean {
    return proto3.util.equals(KeepaliveSourcesRequest, a, b);
  }
}

/**
 * @generated from message account.KeepaliveSourcesResponse
 */
export class KeepaliveSourcesResponse extends Message<KeepaliveSourcesResponse> {
  constructor(data?: PartialMessage<KeepaliveSourcesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.KeepaliveSourcesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeepaliveSourcesResponse {
    return new KeepaliveSourcesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeepaliveSourcesResponse {
    return new KeepaliveSourcesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeepaliveSourcesResponse {
    return new KeepaliveSourcesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: KeepaliveSourcesResponse | PlainMessage<KeepaliveSourcesResponse> | undefined, b: KeepaliveSourcesResponse | PlainMessage<KeepaliveSourcesResponse> | undefined): boolean {
    return proto3.util.equals(KeepaliveSourcesResponse, a, b);
  }
}

/**
 * @generated from message account.CreateTokenRequest
 */
export class CreateTokenRequest extends Message<CreateTokenRequest> {
  /**
   * The Public NKey of the user that is requesting a token
   *
   * @generated from field: string userPublicNkey = 1;
   */
  userPublicNkey = "";

  /**
   * Friendly user name
   *
   * @generated from field: string userName = 2;
   */
  userName = "";

  constructor(data?: PartialMessage<CreateTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.CreateTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userPublicNkey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "userName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTokenRequest {
    return new CreateTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTokenRequest {
    return new CreateTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTokenRequest {
    return new CreateTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTokenRequest | PlainMessage<CreateTokenRequest> | undefined, b: CreateTokenRequest | PlainMessage<CreateTokenRequest> | undefined): boolean {
    return proto3.util.equals(CreateTokenRequest, a, b);
  }
}

/**
 * @generated from message account.CreateTokenResponse
 */
export class CreateTokenResponse extends Message<CreateTokenResponse> {
  /**
   * The JWT as a raw string
   *
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<CreateTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.CreateTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTokenResponse {
    return new CreateTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTokenResponse {
    return new CreateTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTokenResponse {
    return new CreateTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTokenResponse | PlainMessage<CreateTokenResponse> | undefined, b: CreateTokenResponse | PlainMessage<CreateTokenResponse> | undefined): boolean {
    return proto3.util.equals(CreateTokenResponse, a, b);
  }
}

