// @generated by protoc-gen-connect-query v0.4.0 with parameter "target=ts,import_extension=.ts"
// @generated from file apikey.proto (package apikeys, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { createQueryService } from "@bufbuild/connect-query";
import { MethodKind } from "@bufbuild/protobuf";
import { CreateAPIKeyRequest, CreateAPIKeyResponse, DeleteAPIKeyRequest, DeleteAPIKeyResponse, ExchangeKeyForTokenRequest, ExchangeKeyForTokenResponse, GetAPIKeyRequest, GetAPIKeyResponse, ListAPIKeysRequest, ListAPIKeysResponse, UpdateAPIKeyRequest, UpdateAPIKeyResponse } from "./apikey_pb.ts";

export const typeName = "apikeys.ApiKeyService";

/**
 * Creates an API key, pending access token generation from Auth0. The key
 * cannot be used until the user has been redirected to the given URL which
 * allows Auth0 to actually generate an access token
 *
 * @generated from rpc apikeys.ApiKeyService.CreateAPIKey
 */
export const createAPIKey = createQueryService({
  service: {
    methods: {
      createAPIKey: {
        name: "CreateAPIKey",
        kind: MethodKind.Unary,
        I: CreateAPIKeyRequest,
        O: CreateAPIKeyResponse,
      },
    },
    typeName: "apikeys.ApiKeyService",
  },
}).createAPIKey;

/**
 * @generated from rpc apikeys.ApiKeyService.GetAPIKey
 */
export const getAPIKey = createQueryService({
  service: {
    methods: {
      getAPIKey: {
        name: "GetAPIKey",
        kind: MethodKind.Unary,
        I: GetAPIKeyRequest,
        O: GetAPIKeyResponse,
      },
    },
    typeName: "apikeys.ApiKeyService",
  },
}).getAPIKey;

/**
 * @generated from rpc apikeys.ApiKeyService.UpdateAPIKey
 */
export const updateAPIKey = createQueryService({
  service: {
    methods: {
      updateAPIKey: {
        name: "UpdateAPIKey",
        kind: MethodKind.Unary,
        I: UpdateAPIKeyRequest,
        O: UpdateAPIKeyResponse,
      },
    },
    typeName: "apikeys.ApiKeyService",
  },
}).updateAPIKey;

/**
 * @generated from rpc apikeys.ApiKeyService.ListAPIKeys
 */
export const listAPIKeys = createQueryService({
  service: {
    methods: {
      listAPIKeys: {
        name: "ListAPIKeys",
        kind: MethodKind.Unary,
        I: ListAPIKeysRequest,
        O: ListAPIKeysResponse,
      },
    },
    typeName: "apikeys.ApiKeyService",
  },
}).listAPIKeys;

/**
 * @generated from rpc apikeys.ApiKeyService.DeleteAPIKey
 */
export const deleteAPIKey = createQueryService({
  service: {
    methods: {
      deleteAPIKey: {
        name: "DeleteAPIKey",
        kind: MethodKind.Unary,
        I: DeleteAPIKeyRequest,
        O: DeleteAPIKeyResponse,
      },
    },
    typeName: "apikeys.ApiKeyService",
  },
}).deleteAPIKey;

/**
 * Exchanges an Overmind API key for an Oauth access token. That token can
 * then be used to access all other Overmind APIs
 *
 * @generated from rpc apikeys.ApiKeyService.ExchangeKeyForToken
 */
export const exchangeKeyForToken = createQueryService({
  service: {
    methods: {
      exchangeKeyForToken: {
        name: "ExchangeKeyForToken",
        kind: MethodKind.Unary,
        I: ExchangeKeyForTokenRequest,
        O: ExchangeKeyForTokenResponse,
      },
    },
    typeName: "apikeys.ApiKeyService",
  },
}).exchangeKeyForToken;
