// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension=.ts"
// @generated from file bookmarks.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Descriptor for a bookmark
 *
 * @generated from message BookmarkDescriptor
 */
export class BookmarkDescriptor extends Message<BookmarkDescriptor> {
  /**
   * unique id to identify this bookmark
   *
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  /**
   * timestamp when this bookmark was created
   *
   * @generated from field: google.protobuf.Timestamp created = 2;
   */
  created?: Timestamp;

  /**
   * user supplied name of this bookmark
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * user supplied description of this bookmark
   *
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * number of items in this bookmark
   *
   * @generated from field: uint32 size = 5;
   */
  size = 0;

  constructor(data?: PartialMessage<BookmarkDescriptor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BookmarkDescriptor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "created", kind: "message", T: Timestamp },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BookmarkDescriptor {
    return new BookmarkDescriptor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BookmarkDescriptor {
    return new BookmarkDescriptor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BookmarkDescriptor {
    return new BookmarkDescriptor().fromJsonString(jsonString, options);
  }

  static equals(a: BookmarkDescriptor | PlainMessage<BookmarkDescriptor> | undefined, b: BookmarkDescriptor | PlainMessage<BookmarkDescriptor> | undefined): boolean {
    return proto3.util.equals(BookmarkDescriptor, a, b);
  }
}

/**
 * Retrieve the list of stored query bookmarks for the currently active account.
 * Returns a BookmarkList
 *
 * TODO: pagination
 *
 * @generated from message ListBookmarksRequest
 */
export class ListBookmarksRequest extends Message<ListBookmarksRequest> {
  constructor(data?: PartialMessage<ListBookmarksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListBookmarksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBookmarksRequest {
    return new ListBookmarksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBookmarksRequest {
    return new ListBookmarksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBookmarksRequest {
    return new ListBookmarksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListBookmarksRequest | PlainMessage<ListBookmarksRequest> | undefined, b: ListBookmarksRequest | PlainMessage<ListBookmarksRequest> | undefined): boolean {
    return proto3.util.equals(ListBookmarksRequest, a, b);
  }
}

/**
 * response format for ListBookmarks
 *
 * @generated from message ListBookmarkResponse
 */
export class ListBookmarkResponse extends Message<ListBookmarkResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string errorMessage = 2;
   */
  errorMessage = "";

  /**
   * @generated from field: repeated BookmarkDescriptor bookmarks = 3;
   */
  bookmarks: BookmarkDescriptor[] = [];

  constructor(data?: PartialMessage<ListBookmarkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListBookmarkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "errorMessage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bookmarks", kind: "message", T: BookmarkDescriptor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBookmarkResponse {
    return new ListBookmarkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBookmarkResponse {
    return new ListBookmarkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBookmarkResponse {
    return new ListBookmarkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListBookmarkResponse | PlainMessage<ListBookmarkResponse> | undefined, b: ListBookmarkResponse | PlainMessage<ListBookmarkResponse> | undefined): boolean {
    return proto3.util.equals(ListBookmarkResponse, a, b);
  }
}

/**
 * Ask the gateway to store the current state as bookmark with the specified details.
 * Returns a BookmarkStored message when the bookmark is stored
 *
 * @generated from message StoreBookmarkRequest
 */
export class StoreBookmarkRequest extends Message<StoreBookmarkRequest> {
  /**
   * user supplied name of this bookmark
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * user supplied description of this bookmark
   *
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<StoreBookmarkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "StoreBookmarkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoreBookmarkRequest {
    return new StoreBookmarkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoreBookmarkRequest {
    return new StoreBookmarkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoreBookmarkRequest {
    return new StoreBookmarkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StoreBookmarkRequest | PlainMessage<StoreBookmarkRequest> | undefined, b: StoreBookmarkRequest | PlainMessage<StoreBookmarkRequest> | undefined): boolean {
    return proto3.util.equals(StoreBookmarkRequest, a, b);
  }
}

/**
 * After a bookmark is successfully stored, this reply with the new bookmark's details is sent.
 *
 * @generated from message StoreBookmarkResponse
 */
export class StoreBookmarkResponse extends Message<StoreBookmarkResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string errorMessage = 2;
   */
  errorMessage = "";

  /**
   * @generated from field: BookmarkDescriptor bookmark = 3;
   */
  bookmark?: BookmarkDescriptor;

  constructor(data?: PartialMessage<StoreBookmarkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "StoreBookmarkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "errorMessage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bookmark", kind: "message", T: BookmarkDescriptor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoreBookmarkResponse {
    return new StoreBookmarkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoreBookmarkResponse {
    return new StoreBookmarkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoreBookmarkResponse {
    return new StoreBookmarkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StoreBookmarkResponse | PlainMessage<StoreBookmarkResponse> | undefined, b: StoreBookmarkResponse | PlainMessage<StoreBookmarkResponse> | undefined): boolean {
    return proto3.util.equals(StoreBookmarkResponse, a, b);
  }
}

/**
 * @generated from message UpdateBookmarkRequest
 */
export class UpdateBookmarkRequest extends Message<UpdateBookmarkRequest> {
  /**
   * unique id to identify this bookmark
   *
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  /**
   * user supplied name of this bookmark
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * user supplied description of this bookmark
   *
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<UpdateBookmarkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "UpdateBookmarkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBookmarkRequest {
    return new UpdateBookmarkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBookmarkRequest {
    return new UpdateBookmarkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBookmarkRequest {
    return new UpdateBookmarkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateBookmarkRequest | PlainMessage<UpdateBookmarkRequest> | undefined, b: UpdateBookmarkRequest | PlainMessage<UpdateBookmarkRequest> | undefined): boolean {
    return proto3.util.equals(UpdateBookmarkRequest, a, b);
  }
}

/**
 * After a bookmark is successfully updated, this reply with the new bookmark's details is sent.
 *
 * @generated from message UpdateBookmarkResponse
 */
export class UpdateBookmarkResponse extends Message<UpdateBookmarkResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string errorMessage = 2;
   */
  errorMessage = "";

  /**
   * @generated from field: BookmarkDescriptor bookmark = 3;
   */
  bookmark?: BookmarkDescriptor;

  constructor(data?: PartialMessage<UpdateBookmarkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "UpdateBookmarkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "errorMessage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bookmark", kind: "message", T: BookmarkDescriptor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBookmarkResponse {
    return new UpdateBookmarkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBookmarkResponse {
    return new UpdateBookmarkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBookmarkResponse {
    return new UpdateBookmarkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateBookmarkResponse | PlainMessage<UpdateBookmarkResponse> | undefined, b: UpdateBookmarkResponse | PlainMessage<UpdateBookmarkResponse> | undefined): boolean {
    return proto3.util.equals(UpdateBookmarkResponse, a, b);
  }
}

/**
 * Ask the gateway to load the specified bookmark into the current state.
 * Results are streamed to the client in the same way query results are.
 *
 * @generated from message LoadBookmarkRequest
 */
export class LoadBookmarkRequest extends Message<LoadBookmarkRequest> {
  /**
   * unique id of the bookmark to load
   *
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<LoadBookmarkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "LoadBookmarkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoadBookmarkRequest {
    return new LoadBookmarkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoadBookmarkRequest {
    return new LoadBookmarkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoadBookmarkRequest {
    return new LoadBookmarkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoadBookmarkRequest | PlainMessage<LoadBookmarkRequest> | undefined, b: LoadBookmarkRequest | PlainMessage<LoadBookmarkRequest> | undefined): boolean {
    return proto3.util.equals(LoadBookmarkRequest, a, b);
  }
}

/**
 * @generated from message LoadBookmarkResponse
 */
export class LoadBookmarkResponse extends Message<LoadBookmarkResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string errorMessage = 2;
   */
  errorMessage = "";

  constructor(data?: PartialMessage<LoadBookmarkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "LoadBookmarkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "errorMessage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoadBookmarkResponse {
    return new LoadBookmarkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoadBookmarkResponse {
    return new LoadBookmarkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoadBookmarkResponse {
    return new LoadBookmarkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoadBookmarkResponse | PlainMessage<LoadBookmarkResponse> | undefined, b: LoadBookmarkResponse | PlainMessage<LoadBookmarkResponse> | undefined): boolean {
    return proto3.util.equals(LoadBookmarkResponse, a, b);
  }
}

/**
 * Delete the bookmark with the specified ID.
 *
 * @generated from message DeleteBookmarkRequest
 */
export class DeleteBookmarkRequest extends Message<DeleteBookmarkRequest> {
  /**
   * unique id of the bookmark to delete
   *
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<DeleteBookmarkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "DeleteBookmarkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBookmarkRequest {
    return new DeleteBookmarkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBookmarkRequest {
    return new DeleteBookmarkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBookmarkRequest {
    return new DeleteBookmarkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBookmarkRequest | PlainMessage<DeleteBookmarkRequest> | undefined, b: DeleteBookmarkRequest | PlainMessage<DeleteBookmarkRequest> | undefined): boolean {
    return proto3.util.equals(DeleteBookmarkRequest, a, b);
  }
}

/**
 * @generated from message DeleteBookmarkResponse
 */
export class DeleteBookmarkResponse extends Message<DeleteBookmarkResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string errorMessage = 2;
   */
  errorMessage = "";

  constructor(data?: PartialMessage<DeleteBookmarkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "DeleteBookmarkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "errorMessage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBookmarkResponse {
    return new DeleteBookmarkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBookmarkResponse {
    return new DeleteBookmarkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBookmarkResponse {
    return new DeleteBookmarkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBookmarkResponse | PlainMessage<DeleteBookmarkResponse> | undefined, b: DeleteBookmarkResponse | PlainMessage<DeleteBookmarkResponse> | undefined): boolean {
    return proto3.util.equals(DeleteBookmarkResponse, a, b);
  }
}

