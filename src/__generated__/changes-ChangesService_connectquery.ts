// @generated by protoc-gen-connect-query v2.0.1 with parameter "target=ts"
// @generated from file changes.proto (package changes, syntax proto3)
/* eslint-disable */

import { ChangesService } from "./changes_pb";

/**
 * Lists all apps
 *
 * @generated from rpc changes.ChangesService.ListApps
 */
export const listApps = ChangesService.method.listApps;

/**
 * Creates a new app
 *
 * @generated from rpc changes.ChangesService.CreateApp
 */
export const createApp = ChangesService.method.createApp;

/**
 * Creates an app using just a URL as input. This automatically creates and
 * sets the bookmark UUID, along with the url for display in the GUI
 *
 * @generated from rpc changes.ChangesService.CreateSimpleApp
 */
export const createSimpleApp = ChangesService.method.createSimpleApp;

/**
 * Gets the details of an existing app
 *
 * @generated from rpc changes.ChangesService.GetApp
 */
export const getApp = ChangesService.method.getApp;

/**
 * Updates an existing app
 *
 * @generated from rpc changes.ChangesService.UpdateApp
 */
export const updateApp = ChangesService.method.updateApp;

/**
 * Deletes an app
 *
 * @generated from rpc changes.ChangesService.DeleteApp
 */
export const deleteApp = ChangesService.method.deleteApp;

/**
 * Lists all changes
 *
 * @generated from rpc changes.ChangesService.ListChanges
 */
export const listChanges = ChangesService.method.listChanges;

/**
 * list all changes in a specific status
 *
 * @generated from rpc changes.ChangesService.ListChangesByStatus
 */
export const listChangesByStatus = ChangesService.method.listChangesByStatus;

/**
 * Creates a new change
 *
 * @generated from rpc changes.ChangesService.CreateChange
 */
export const createChange = ChangesService.method.createChange;

/**
 * Gets the details of an existing change
 *
 * @generated from rpc changes.ChangesService.GetChange
 */
export const getChange = ChangesService.method.getChange;

/**
 * Gets the risks and risk calculation status of an existing change
 *
 * @generated from rpc changes.ChangesService.GetChangeRisks
 */
export const getChangeRisks = ChangesService.method.getChangeRisks;

/**
 * Gets the all data of an existing change for archival
 *
 * @generated from rpc changes.ChangesService.GetChangeArchive
 */
export const getChangeArchive = ChangesService.method.getChangeArchive;

/**
 * Updates an existing change
 *
 * @generated from rpc changes.ChangesService.UpdateChange
 */
export const updateChange = ChangesService.method.updateChange;

/**
 * Deletes a change
 *
 * @generated from rpc changes.ChangesService.DeleteChange
 */
export const deleteChange = ChangesService.method.deleteChange;

/**
 * Lists all changes for a snapshot UUID
 *
 * @generated from rpc changes.ChangesService.ListChangesBySnapshotUUID
 */
export const listChangesBySnapshotUUID = ChangesService.method.listChangesBySnapshotUUID;

/**
 * Get the timeline of changes for a given change
 *
 * @generated from rpc changes.ChangesService.GetChangeTimeline
 */
export const getChangeTimeline = ChangesService.method.getChangeTimeline;

/**
 * Ask the gateway to refresh all internal caches and status slots
 * The RPC will return immediately doing all processing in the background
 *
 * @generated from rpc changes.ChangesService.RefreshState
 */
export const refreshState = ChangesService.method.refreshState;

/**
 * @generated from rpc changes.ChangesService.GetOnboarding
 */
export const getOnboarding = ChangesService.method.getOnboarding;

/**
 * @generated from rpc changes.ChangesService.UpdateOnboarding
 */
export const updateOnboarding = ChangesService.method.updateOnboarding;

/**
 * Lists all apps, designed for use in the apps home page
 *
 * @generated from rpc changes.ChangesService.ListHomeApps
 */
export const listHomeApps = ChangesService.method.listHomeApps;

/**
 * Lists all changes, designed for use in the changes home page
 *
 * @generated from rpc changes.ChangesService.ListHomeChanges
 */
export const listHomeChanges = ChangesService.method.listHomeChanges;

/**
 * Gets a summary of an app, used when a user clicks on a given app
 *
 * @generated from rpc changes.ChangesService.GetAppSummary
 */
export const getAppSummary = ChangesService.method.getAppSummary;

/**
 * Gets a summaries of a list of apps
 *
 * @generated from rpc changes.ChangesService.GetAppSummaries
 */
export const getAppSummaries = ChangesService.method.getAppSummaries;

/**
 * Lists all changes affecting an app
 *
 * @generated from rpc changes.ChangesService.ListAppChanges
 */
export const listAppChanges = ChangesService.method.listAppChanges;

/**
 * Lists all changes affecting an app, returning only a summary of each change
 * rather than the full details
 *
 * @generated from rpc changes.ChangesService.ListAppChangesSummary
 */
export const listAppChangesSummary = ChangesService.method.listAppChangesSummary;

/**
 * Returns a list of apps that are affected by this change. This is calculated
 * by looking at the blast radius snapshot and finding all apps that have
 * items in the snapshot.
 *
 * @generated from rpc changes.ChangesService.GetAffectedApps
 */
export const getAffectedApps = ChangesService.method.getAffectedApps;

/**
 * Gets the diff summary for all items that were planned to change as part of
 * this change. This includes the high level details of the item, and the
 * status (e.g. changed, deleted) but not the diff itself
 *
 * @generated from rpc changes.ChangesService.ListChangingItemsSummary
 */
export const listChangingItemsSummary = ChangesService.method.listChangingItemsSummary;

/**
 * Gets the full diff of everything that changed as part of this "change".
 * This includes all items and also edges between them
 *
 * @generated from rpc changes.ChangesService.GetDiff
 */
export const getDiff = ChangesService.method.getDiff;

/**
 * List all the available repos, authors and statuses that can be used to populate the dropdown filters
 *
 * @generated from rpc changes.ChangesService.PopulateChangeFilters
 */
export const populateChangeFilters = ChangesService.method.populateChangeFilters;
