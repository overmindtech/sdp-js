// @generated by protoc-gen-connect-query v0.2.0 with parameter "target=ts,import_extension=.ts"
// @generated from file changes.proto (package changes, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { createQueryService } from "@bufbuild/connect-query";
import { MethodKind } from "@bufbuild/protobuf";
import { CreateAppRequest, CreateAppResponse, CreateChangeRequest, CreateChangeResponse, DeleteAppRequest, DeleteAppResponse, DeleteChangeRequest, DeleteChangeResponse, GetAppRequest, GetAppResponse, GetChangeRequest, GetChangeResponse, GetChangesHomeRequest, GetChangesHomeResponse, GetOnboardingRequest, GetOnboardingResponse, ListAppChangesRequest, ListAppChangesResponse, ListAppsRequest, ListAppsResponse, ListChangesRequest, ListChangesResponse, UpdateAppRequest, UpdateAppResponse, UpdateChangeRequest, UpdateChangeResponse, UpdateOnboardingRequest, UpdateOnboardingResponse } from "./changes_pb.ts";

export const typeName = "changes.ChangesService";

/**
 * Lists all apps
 *
 * @generated from rpc changes.ChangesService.ListApps
 */
export const listApps = createQueryService({
  service: {
    methods: {
      listApps: {
        name: "ListApps",
        kind: MethodKind.Unary,
        I: ListAppsRequest,
        O: ListAppsResponse,
      },
    },
    typeName: "changes.ChangesService",
  },
}).listApps;

/**
 * Creates a new app
 *
 * @generated from rpc changes.ChangesService.CreateApp
 */
export const createApp = createQueryService({
  service: {
    methods: {
      createApp: {
        name: "CreateApp",
        kind: MethodKind.Unary,
        I: CreateAppRequest,
        O: CreateAppResponse,
      },
    },
    typeName: "changes.ChangesService",
  },
}).createApp;

/**
 * Gets the details of an existing app
 *
 * @generated from rpc changes.ChangesService.GetApp
 */
export const getApp = createQueryService({
  service: {
    methods: {
      getApp: {
        name: "GetApp",
        kind: MethodKind.Unary,
        I: GetAppRequest,
        O: GetAppResponse,
      },
    },
    typeName: "changes.ChangesService",
  },
}).getApp;

/**
 * Updates an existing app
 *
 * @generated from rpc changes.ChangesService.UpdateApp
 */
export const updateApp = createQueryService({
  service: {
    methods: {
      updateApp: {
        name: "UpdateApp",
        kind: MethodKind.Unary,
        I: UpdateAppRequest,
        O: UpdateAppResponse,
      },
    },
    typeName: "changes.ChangesService",
  },
}).updateApp;

/**
 * Deletes an app
 *
 * @generated from rpc changes.ChangesService.DeleteApp
 */
export const deleteApp = createQueryService({
  service: {
    methods: {
      deleteApp: {
        name: "DeleteApp",
        kind: MethodKind.Unary,
        I: DeleteAppRequest,
        O: DeleteAppResponse,
      },
    },
    typeName: "changes.ChangesService",
  },
}).deleteApp;

/**
 * Lists all changes
 *
 * @generated from rpc changes.ChangesService.ListChanges
 */
export const listChanges = createQueryService({
  service: {
    methods: {
      listChanges: {
        name: "ListChanges",
        kind: MethodKind.Unary,
        I: ListChangesRequest,
        O: ListChangesResponse,
      },
    },
    typeName: "changes.ChangesService",
  },
}).listChanges;

/**
 * Creates a new change
 *
 * @generated from rpc changes.ChangesService.CreateChange
 */
export const createChange = createQueryService({
  service: {
    methods: {
      createChange: {
        name: "CreateChange",
        kind: MethodKind.Unary,
        I: CreateChangeRequest,
        O: CreateChangeResponse,
      },
    },
    typeName: "changes.ChangesService",
  },
}).createChange;

/**
 * Gets the details of an existing change
 *
 * @generated from rpc changes.ChangesService.GetChange
 */
export const getChange = createQueryService({
  service: {
    methods: {
      getChange: {
        name: "GetChange",
        kind: MethodKind.Unary,
        I: GetChangeRequest,
        O: GetChangeResponse,
      },
    },
    typeName: "changes.ChangesService",
  },
}).getChange;

/**
 * Updates an existing change
 *
 * @generated from rpc changes.ChangesService.UpdateChange
 */
export const updateChange = createQueryService({
  service: {
    methods: {
      updateChange: {
        name: "UpdateChange",
        kind: MethodKind.Unary,
        I: UpdateChangeRequest,
        O: UpdateChangeResponse,
      },
    },
    typeName: "changes.ChangesService",
  },
}).updateChange;

/**
 * Deletes a change
 *
 * @generated from rpc changes.ChangesService.DeleteChange
 */
export const deleteChange = createQueryService({
  service: {
    methods: {
      deleteChange: {
        name: "DeleteChange",
        kind: MethodKind.Unary,
        I: DeleteChangeRequest,
        O: DeleteChangeResponse,
      },
    },
    typeName: "changes.ChangesService",
  },
}).deleteChange;

/**
 * @generated from rpc changes.ChangesService.GetOnboarding
 */
export const getOnboarding = createQueryService({
  service: {
    methods: {
      getOnboarding: {
        name: "GetOnboarding",
        kind: MethodKind.Unary,
        I: GetOnboardingRequest,
        O: GetOnboardingResponse,
      },
    },
    typeName: "changes.ChangesService",
  },
}).getOnboarding;

/**
 * @generated from rpc changes.ChangesService.UpdateOnboarding
 */
export const updateOnboarding = createQueryService({
  service: {
    methods: {
      updateOnboarding: {
        name: "UpdateOnboarding",
        kind: MethodKind.Unary,
        I: UpdateOnboardingRequest,
        O: UpdateOnboardingResponse,
      },
    },
    typeName: "changes.ChangesService",
  },
}).updateOnboarding;

/**
 * @generated from rpc changes.ChangesService.GetChangesHome
 */
export const getChangesHome = createQueryService({
  service: {
    methods: {
      getChangesHome: {
        name: "GetChangesHome",
        kind: MethodKind.Unary,
        I: GetChangesHomeRequest,
        O: GetChangesHomeResponse,
      },
    },
    typeName: "changes.ChangesService",
  },
}).getChangesHome;

/**
 * @generated from rpc changes.ChangesService.ListAppChanges
 */
export const listAppChanges = createQueryService({
  service: {
    methods: {
      listAppChanges: {
        name: "ListAppChanges",
        kind: MethodKind.Unary,
        I: ListAppChangesRequest,
        O: ListAppChangesResponse,
      },
    },
    typeName: "changes.ChangesService",
  },
}).listAppChanges;
