// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts,import_extension=.ts"
// @generated from file changes.proto (package changes, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodKind } from "@bufbuild/protobuf";
import { CreateAppRequest, CreateAppResponse, CreateChangeRequest, CreateChangeResponse, CreateSimpleAppRequest, CreateSimpleAppResponse, DeleteAppRequest, DeleteAppResponse, DeleteChangeRequest, DeleteChangeResponse, GetAffectedAppsRequest, GetAffectedAppsResponse, GetAppRequest, GetAppResponse, GetAppSummariesRequest, GetAppSummariesResponse, GetAppSummaryRequest, GetAppSummaryResponse, GetChangeArchiveRequest, GetChangeArchiveResponse, GetChangeRequest, GetChangeResponse, GetChangeRisksRequest, GetChangeRisksResponse, GetChangeTimelineRequest, GetChangeTimelineResponse, GetDiffRequest, GetDiffResponse, GetOnboardingRequest, GetOnboardingResponse, ListAppChangesRequest, ListAppChangesResponse, ListAppChangesSummaryRequest, ListAppChangesSummaryResponse, ListAppsRequest, ListAppsResponse, ListChangesBySnapshotUUIDRequest, ListChangesBySnapshotUUIDResponse, ListChangesByStatusRequest, ListChangesByStatusResponse, ListChangesRequest, ListChangesResponse, ListChangingItemsSummaryRequest, ListChangingItemsSummaryResponse, ListHomeAppsRequest, ListHomeAppsResponse, ListHomeChangesRequest, ListHomeChangesResponse, PopulateChangeFiltersRequest, PopulateChangeFiltersResponse, RefreshStateRequest, RefreshStateResponse, UpdateAppRequest, UpdateAppResponse, UpdateChangeRequest, UpdateChangeResponse, UpdateOnboardingRequest, UpdateOnboardingResponse } from "./changes_pb.ts";

/**
 * Lists all apps
 *
 * @generated from rpc changes.ChangesService.ListApps
 */
export const listApps = {
  localName: "listApps",
  name: "ListApps",
  kind: MethodKind.Unary,
  I: ListAppsRequest,
  O: ListAppsResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Creates a new app
 *
 * @generated from rpc changes.ChangesService.CreateApp
 */
export const createApp = {
  localName: "createApp",
  name: "CreateApp",
  kind: MethodKind.Unary,
  I: CreateAppRequest,
  O: CreateAppResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Creates an app using just a URL as input. This automatically creates and
 * sets the bookmark UUID, along with the url for display in the GUI
 *
 * @generated from rpc changes.ChangesService.CreateSimpleApp
 */
export const createSimpleApp = {
  localName: "createSimpleApp",
  name: "CreateSimpleApp",
  kind: MethodKind.Unary,
  I: CreateSimpleAppRequest,
  O: CreateSimpleAppResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Gets the details of an existing app
 *
 * @generated from rpc changes.ChangesService.GetApp
 */
export const getApp = {
  localName: "getApp",
  name: "GetApp",
  kind: MethodKind.Unary,
  I: GetAppRequest,
  O: GetAppResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Updates an existing app
 *
 * @generated from rpc changes.ChangesService.UpdateApp
 */
export const updateApp = {
  localName: "updateApp",
  name: "UpdateApp",
  kind: MethodKind.Unary,
  I: UpdateAppRequest,
  O: UpdateAppResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Deletes an app
 *
 * @generated from rpc changes.ChangesService.DeleteApp
 */
export const deleteApp = {
  localName: "deleteApp",
  name: "DeleteApp",
  kind: MethodKind.Unary,
  I: DeleteAppRequest,
  O: DeleteAppResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Lists all changes
 *
 * @generated from rpc changes.ChangesService.ListChanges
 */
export const listChanges = {
  localName: "listChanges",
  name: "ListChanges",
  kind: MethodKind.Unary,
  I: ListChangesRequest,
  O: ListChangesResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * list all changes in a specific status
 *
 * @generated from rpc changes.ChangesService.ListChangesByStatus
 */
export const listChangesByStatus = {
  localName: "listChangesByStatus",
  name: "ListChangesByStatus",
  kind: MethodKind.Unary,
  I: ListChangesByStatusRequest,
  O: ListChangesByStatusResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Creates a new change
 *
 * @generated from rpc changes.ChangesService.CreateChange
 */
export const createChange = {
  localName: "createChange",
  name: "CreateChange",
  kind: MethodKind.Unary,
  I: CreateChangeRequest,
  O: CreateChangeResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Gets the details of an existing change
 *
 * @generated from rpc changes.ChangesService.GetChange
 */
export const getChange = {
  localName: "getChange",
  name: "GetChange",
  kind: MethodKind.Unary,
  I: GetChangeRequest,
  O: GetChangeResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Gets the risks and risk calculation status of an existing change
 *
 * @generated from rpc changes.ChangesService.GetChangeRisks
 */
export const getChangeRisks = {
  localName: "getChangeRisks",
  name: "GetChangeRisks",
  kind: MethodKind.Unary,
  I: GetChangeRisksRequest,
  O: GetChangeRisksResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Gets the all data of an existing change for archival
 *
 * @generated from rpc changes.ChangesService.GetChangeArchive
 */
export const getChangeArchive = {
  localName: "getChangeArchive",
  name: "GetChangeArchive",
  kind: MethodKind.Unary,
  I: GetChangeArchiveRequest,
  O: GetChangeArchiveResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Updates an existing change
 *
 * @generated from rpc changes.ChangesService.UpdateChange
 */
export const updateChange = {
  localName: "updateChange",
  name: "UpdateChange",
  kind: MethodKind.Unary,
  I: UpdateChangeRequest,
  O: UpdateChangeResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Deletes a change
 *
 * @generated from rpc changes.ChangesService.DeleteChange
 */
export const deleteChange = {
  localName: "deleteChange",
  name: "DeleteChange",
  kind: MethodKind.Unary,
  I: DeleteChangeRequest,
  O: DeleteChangeResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Lists all changes for a snapshot UUID
 *
 * @generated from rpc changes.ChangesService.ListChangesBySnapshotUUID
 */
export const listChangesBySnapshotUUID = {
  localName: "listChangesBySnapshotUUID",
  name: "ListChangesBySnapshotUUID",
  kind: MethodKind.Unary,
  I: ListChangesBySnapshotUUIDRequest,
  O: ListChangesBySnapshotUUIDResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Get the timeline of changes for a given change
 *
 * @generated from rpc changes.ChangesService.GetChangeTimeline
 */
export const getChangeTimeline = {
  localName: "getChangeTimeline",
  name: "GetChangeTimeline",
  kind: MethodKind.Unary,
  I: GetChangeTimelineRequest,
  O: GetChangeTimelineResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Ask the gateway to refresh all internal caches and status slots
 * The RPC will return immediately doing all processing in the background
 *
 * @generated from rpc changes.ChangesService.RefreshState
 */
export const refreshState = {
  localName: "refreshState",
  name: "RefreshState",
  kind: MethodKind.Unary,
  I: RefreshStateRequest,
  O: RefreshStateResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * @generated from rpc changes.ChangesService.GetOnboarding
 */
export const getOnboarding = {
  localName: "getOnboarding",
  name: "GetOnboarding",
  kind: MethodKind.Unary,
  I: GetOnboardingRequest,
  O: GetOnboardingResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * @generated from rpc changes.ChangesService.UpdateOnboarding
 */
export const updateOnboarding = {
  localName: "updateOnboarding",
  name: "UpdateOnboarding",
  kind: MethodKind.Unary,
  I: UpdateOnboardingRequest,
  O: UpdateOnboardingResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Lists all apps, designed for use in the apps home page
 *
 * @generated from rpc changes.ChangesService.ListHomeApps
 */
export const listHomeApps = {
  localName: "listHomeApps",
  name: "ListHomeApps",
  kind: MethodKind.Unary,
  I: ListHomeAppsRequest,
  O: ListHomeAppsResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Lists all changes, designed for use in the changes home page
 *
 * @generated from rpc changes.ChangesService.ListHomeChanges
 */
export const listHomeChanges = {
  localName: "listHomeChanges",
  name: "ListHomeChanges",
  kind: MethodKind.Unary,
  I: ListHomeChangesRequest,
  O: ListHomeChangesResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Gets a summary of an app, used when a user clicks on a given app
 *
 * @generated from rpc changes.ChangesService.GetAppSummary
 */
export const getAppSummary = {
  localName: "getAppSummary",
  name: "GetAppSummary",
  kind: MethodKind.Unary,
  I: GetAppSummaryRequest,
  O: GetAppSummaryResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Gets a summaries of a list of apps
 *
 * @generated from rpc changes.ChangesService.GetAppSummaries
 */
export const getAppSummaries = {
  localName: "getAppSummaries",
  name: "GetAppSummaries",
  kind: MethodKind.Unary,
  I: GetAppSummariesRequest,
  O: GetAppSummariesResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Lists all changes affecting an app
 *
 * @generated from rpc changes.ChangesService.ListAppChanges
 */
export const listAppChanges = {
  localName: "listAppChanges",
  name: "ListAppChanges",
  kind: MethodKind.Unary,
  I: ListAppChangesRequest,
  O: ListAppChangesResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Lists all changes affecting an app, returning only a summary of each change
 * rather than the full details
 *
 * @generated from rpc changes.ChangesService.ListAppChangesSummary
 */
export const listAppChangesSummary = {
  localName: "listAppChangesSummary",
  name: "ListAppChangesSummary",
  kind: MethodKind.Unary,
  I: ListAppChangesSummaryRequest,
  O: ListAppChangesSummaryResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Returns a list of apps that are affected by this change. This is calculated
 * by looking at the blast radius snapshot and finding all apps that have
 * items in the snapshot.
 *
 * @generated from rpc changes.ChangesService.GetAffectedApps
 */
export const getAffectedApps = {
  localName: "getAffectedApps",
  name: "GetAffectedApps",
  kind: MethodKind.Unary,
  I: GetAffectedAppsRequest,
  O: GetAffectedAppsResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Gets the diff summary for all items that were planned to change as part of
 * this change. This includes the high level details of the item, and the
 * status (e.g. changed, deleted) but not the diff itself
 *
 * @generated from rpc changes.ChangesService.ListChangingItemsSummary
 */
export const listChangingItemsSummary = {
  localName: "listChangingItemsSummary",
  name: "ListChangingItemsSummary",
  kind: MethodKind.Unary,
  I: ListChangingItemsSummaryRequest,
  O: ListChangingItemsSummaryResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * Gets the full diff of everything that changed as part of this "change".
 * This includes all items and also edges between them
 *
 * @generated from rpc changes.ChangesService.GetDiff
 */
export const getDiff = {
  localName: "getDiff",
  name: "GetDiff",
  kind: MethodKind.Unary,
  I: GetDiffRequest,
  O: GetDiffResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;

/**
 * List all the available repos, authors and statuses that can be used to populate the dropdown filters
 *
 * @generated from rpc changes.ChangesService.PopulateChangeFilters
 */
export const populateChangeFilters = {
  localName: "populateChangeFilters",
  name: "PopulateChangeFilters",
  kind: MethodKind.Unary,
  I: PopulateChangeFiltersRequest,
  O: PopulateChangeFiltersResponse,
  service: {
    typeName: "changes.ChangesService"
  }
} as const;
