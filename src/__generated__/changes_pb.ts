// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension=.ts"
// @generated from file changes.proto (package changes, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Edge, Health, Item, Query, Reference } from "./items_pb.ts";
import { Bookmark } from "./bookmarks_pb.ts";
import { Snapshot } from "./snapshots_pb.ts";

/**
 * @generated from enum changes.ItemDiffStatus
 */
export enum ItemDiffStatus {
  /**
   * @generated from enum value: ITEM_DIFF_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ITEM_DIFF_STATUS_UNCHANGED = 1;
   */
  UNCHANGED = 1,

  /**
   * @generated from enum value: ITEM_DIFF_STATUS_CREATED = 2;
   */
  CREATED = 2,

  /**
   * @generated from enum value: ITEM_DIFF_STATUS_UPDATED = 3;
   */
  UPDATED = 3,

  /**
   * @generated from enum value: ITEM_DIFF_STATUS_DELETED = 4;
   */
  DELETED = 4,

  /**
   * @generated from enum value: ITEM_DIFF_STATUS_REPLACED = 5;
   */
  REPLACED = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(ItemDiffStatus)
proto3.util.setEnumType(ItemDiffStatus, "changes.ItemDiffStatus", [
  { no: 0, name: "ITEM_DIFF_STATUS_UNSPECIFIED" },
  { no: 1, name: "ITEM_DIFF_STATUS_UNCHANGED" },
  { no: 2, name: "ITEM_DIFF_STATUS_CREATED" },
  { no: 3, name: "ITEM_DIFF_STATUS_UPDATED" },
  { no: 4, name: "ITEM_DIFF_STATUS_DELETED" },
  { no: 5, name: "ITEM_DIFF_STATUS_REPLACED" },
]);

/**
 * @generated from enum changes.ChangeStatus
 */
export enum ChangeStatus {
  /**
   * The change has been created, but the blast radius has not yet been
   * calculated. The blast radius can be calculated using the
   * `CalculateBlastRadius` RPC.
   *
   * @generated from enum value: CHANGE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The blast radius has been calculated, but the change has not yet started.
   * The change can be started using the `StartChange` RPC.
   *
   * @generated from enum value: CHANGE_STATUS_DEFINING = 1;
   */
  DEFINING = 1,

  /**
   * The change is in progress. The change can be ended using the `EndChange`
   * RPC.
   *
   * @generated from enum value: CHANGE_STATUS_HAPPENING = 2;
   */
  HAPPENING = 2,

  /**
   * The change has been ended, but the results have not yet been processed.
   *
   * @generated from enum value: CHANGE_STATUS_PROCESSING = 3;
   */
  PROCESSING = 3,

  /**
   * The change has been ended and the results have been processed.
   *
   * @generated from enum value: CHANGE_STATUS_DONE = 4;
   */
  DONE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(ChangeStatus)
proto3.util.setEnumType(ChangeStatus, "changes.ChangeStatus", [
  { no: 0, name: "CHANGE_STATUS_UNSPECIFIED" },
  { no: 1, name: "CHANGE_STATUS_DEFINING" },
  { no: 2, name: "CHANGE_STATUS_HAPPENING" },
  { no: 3, name: "CHANGE_STATUS_PROCESSING" },
  { no: 4, name: "CHANGE_STATUS_DONE" },
]);

/**
 * @generated from enum changes.OnboardingStatus
 */
export enum OnboardingStatus {
  /**
   * @generated from enum value: ONBOARDING_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ONBOARDING_STATUS_ADD_AWS_ACCOUNT = 1;
   */
  ADD_AWS_ACCOUNT = 1,

  /**
   * @generated from enum value: ONBOARDING_STATUS_ADD_APP = 2;
   */
  ADD_APP = 2,

  /**
   * @generated from enum value: ONBOARDING_STATUS_CREATE_CHANGE = 3;
   */
  CREATE_CHANGE = 3,

  /**
   * @generated from enum value: ONBOARDING_STATUS_SIMULATE_CHANGE = 4;
   */
  SIMULATE_CHANGE = 4,

  /**
   * @generated from enum value: ONBOARDING_STATUS_DONE = 5;
   */
  DONE = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(OnboardingStatus)
proto3.util.setEnumType(OnboardingStatus, "changes.OnboardingStatus", [
  { no: 0, name: "ONBOARDING_STATUS_UNSPECIFIED" },
  { no: 1, name: "ONBOARDING_STATUS_ADD_AWS_ACCOUNT" },
  { no: 2, name: "ONBOARDING_STATUS_ADD_APP" },
  { no: 3, name: "ONBOARDING_STATUS_CREATE_CHANGE" },
  { no: 4, name: "ONBOARDING_STATUS_SIMULATE_CHANGE" },
  { no: 5, name: "ONBOARDING_STATUS_DONE" },
]);

/**
 * @generated from message changes.GetChangeTimelineRequest
 */
export class GetChangeTimelineRequest extends Message<GetChangeTimelineRequest> {
  /**
   * @generated from field: bytes changeUUID = 1;
   */
  changeUUID = new Uint8Array(0);

  constructor(data?: PartialMessage<GetChangeTimelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetChangeTimelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangeTimelineRequest {
    return new GetChangeTimelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangeTimelineRequest {
    return new GetChangeTimelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangeTimelineRequest {
    return new GetChangeTimelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangeTimelineRequest | PlainMessage<GetChangeTimelineRequest> | undefined, b: GetChangeTimelineRequest | PlainMessage<GetChangeTimelineRequest> | undefined): boolean {
    return proto3.util.equals(GetChangeTimelineRequest, a, b);
  }
}

/**
 * @generated from message changes.GetChangeTimelineResponse
 */
export class GetChangeTimelineResponse extends Message<GetChangeTimelineResponse> {
  /**
   * @generated from field: repeated changes.ChangeTimelineEntry entries = 1;
   */
  entries: ChangeTimelineEntry[] = [];

  constructor(data?: PartialMessage<GetChangeTimelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetChangeTimelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: ChangeTimelineEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangeTimelineResponse {
    return new GetChangeTimelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangeTimelineResponse {
    return new GetChangeTimelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangeTimelineResponse {
    return new GetChangeTimelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangeTimelineResponse | PlainMessage<GetChangeTimelineResponse> | undefined, b: GetChangeTimelineResponse | PlainMessage<GetChangeTimelineResponse> | undefined): boolean {
    return proto3.util.equals(GetChangeTimelineResponse, a, b);
  }
}

/**
 * @generated from message changes.ChangeTimelineEntry
 */
export class ChangeTimelineEntry extends Message<ChangeTimelineEntry> {
  /**
   * The status that this event should be associated with. Usually this would be
   * the status that the changed ended up in as a result of this action
   *
   * @generated from field: changes.ChangeStatus status = 1;
   */
  status = ChangeStatus.UNSPECIFIED;

  /**
   * The message that describes this event
   *
   * @generated from field: string statusMessage = 2;
   */
  statusMessage = "";

  /**
   * The time that this event happened
   *
   * @generated from field: google.protobuf.Timestamp happenedAt = 3;
   */
  happenedAt?: Timestamp;

  /**
   * The name of the user that performed this action
   *
   * @generated from field: string actorName = 4;
   */
  actorName = "";

  constructor(data?: PartialMessage<ChangeTimelineEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ChangeTimelineEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(ChangeStatus) },
    { no: 2, name: "statusMessage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "happenedAt", kind: "message", T: Timestamp },
    { no: 4, name: "actorName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeTimelineEntry {
    return new ChangeTimelineEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeTimelineEntry {
    return new ChangeTimelineEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeTimelineEntry {
    return new ChangeTimelineEntry().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeTimelineEntry | PlainMessage<ChangeTimelineEntry> | undefined, b: ChangeTimelineEntry | PlainMessage<ChangeTimelineEntry> | undefined): boolean {
    return proto3.util.equals(ChangeTimelineEntry, a, b);
  }
}

/**
 * @generated from message changes.GetDiffRequest
 */
export class GetDiffRequest extends Message<GetDiffRequest> {
  /**
   * @generated from field: bytes changeUUID = 1;
   */
  changeUUID = new Uint8Array(0);

  constructor(data?: PartialMessage<GetDiffRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetDiffRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDiffRequest {
    return new GetDiffRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDiffRequest {
    return new GetDiffRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDiffRequest {
    return new GetDiffRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDiffRequest | PlainMessage<GetDiffRequest> | undefined, b: GetDiffRequest | PlainMessage<GetDiffRequest> | undefined): boolean {
    return proto3.util.equals(GetDiffRequest, a, b);
  }
}

/**
 * @generated from message changes.GetDiffResponse
 */
export class GetDiffResponse extends Message<GetDiffResponse> {
  /**
   * Items that were planned to be changed, and were changed
   *
   * @generated from field: repeated changes.ItemDiff expectedItems = 1;
   */
  expectedItems: ItemDiff[] = [];

  /**
   * Items that were changed, but were not planned to be changed
   *
   * @generated from field: repeated changes.ItemDiff unexpectedItems = 3;
   */
  unexpectedItems: ItemDiff[] = [];

  /**
   * @generated from field: repeated Edge edges = 2;
   */
  edges: Edge[] = [];

  /**
   * Items that were planned to be changed, but were not changed
   *
   * @generated from field: repeated changes.ItemDiff missingItems = 4;
   */
  missingItems: ItemDiff[] = [];

  constructor(data?: PartialMessage<GetDiffResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetDiffResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "expectedItems", kind: "message", T: ItemDiff, repeated: true },
    { no: 3, name: "unexpectedItems", kind: "message", T: ItemDiff, repeated: true },
    { no: 2, name: "edges", kind: "message", T: Edge, repeated: true },
    { no: 4, name: "missingItems", kind: "message", T: ItemDiff, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDiffResponse {
    return new GetDiffResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDiffResponse {
    return new GetDiffResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDiffResponse {
    return new GetDiffResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDiffResponse | PlainMessage<GetDiffResponse> | undefined, b: GetDiffResponse | PlainMessage<GetDiffResponse> | undefined): boolean {
    return proto3.util.equals(GetDiffResponse, a, b);
  }
}

/**
 * @generated from message changes.ListChangingItemsSummaryRequest
 */
export class ListChangingItemsSummaryRequest extends Message<ListChangingItemsSummaryRequest> {
  /**
   * @generated from field: bytes changeUUID = 1;
   */
  changeUUID = new Uint8Array(0);

  constructor(data?: PartialMessage<ListChangingItemsSummaryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListChangingItemsSummaryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListChangingItemsSummaryRequest {
    return new ListChangingItemsSummaryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListChangingItemsSummaryRequest {
    return new ListChangingItemsSummaryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListChangingItemsSummaryRequest {
    return new ListChangingItemsSummaryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListChangingItemsSummaryRequest | PlainMessage<ListChangingItemsSummaryRequest> | undefined, b: ListChangingItemsSummaryRequest | PlainMessage<ListChangingItemsSummaryRequest> | undefined): boolean {
    return proto3.util.equals(ListChangingItemsSummaryRequest, a, b);
  }
}

/**
 * @generated from message changes.ListChangingItemsSummaryResponse
 */
export class ListChangingItemsSummaryResponse extends Message<ListChangingItemsSummaryResponse> {
  /**
   * @generated from field: repeated changes.ItemDiffSummary items = 1;
   */
  items: ItemDiffSummary[] = [];

  constructor(data?: PartialMessage<ListChangingItemsSummaryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListChangingItemsSummaryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: ItemDiffSummary, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListChangingItemsSummaryResponse {
    return new ListChangingItemsSummaryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListChangingItemsSummaryResponse {
    return new ListChangingItemsSummaryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListChangingItemsSummaryResponse {
    return new ListChangingItemsSummaryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListChangingItemsSummaryResponse | PlainMessage<ListChangingItemsSummaryResponse> | undefined, b: ListChangingItemsSummaryResponse | PlainMessage<ListChangingItemsSummaryResponse> | undefined): boolean {
    return proto3.util.equals(ListChangingItemsSummaryResponse, a, b);
  }
}

/**
 * @generated from message changes.GetAffectedAppsRequest
 */
export class GetAffectedAppsRequest extends Message<GetAffectedAppsRequest> {
  /**
   * @generated from field: bytes changeUUID = 1;
   */
  changeUUID = new Uint8Array(0);

  constructor(data?: PartialMessage<GetAffectedAppsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetAffectedAppsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAffectedAppsRequest {
    return new GetAffectedAppsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAffectedAppsRequest {
    return new GetAffectedAppsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAffectedAppsRequest {
    return new GetAffectedAppsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAffectedAppsRequest | PlainMessage<GetAffectedAppsRequest> | undefined, b: GetAffectedAppsRequest | PlainMessage<GetAffectedAppsRequest> | undefined): boolean {
    return proto3.util.equals(GetAffectedAppsRequest, a, b);
  }
}

/**
 * @generated from message changes.GetAffectedAppsResponse
 */
export class GetAffectedAppsResponse extends Message<GetAffectedAppsResponse> {
  /**
   * @generated from field: repeated changes.AppSummary apps = 1;
   */
  apps: AppSummary[] = [];

  constructor(data?: PartialMessage<GetAffectedAppsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetAffectedAppsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apps", kind: "message", T: AppSummary, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAffectedAppsResponse {
    return new GetAffectedAppsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAffectedAppsResponse {
    return new GetAffectedAppsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAffectedAppsResponse {
    return new GetAffectedAppsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAffectedAppsResponse | PlainMessage<GetAffectedAppsResponse> | undefined, b: GetAffectedAppsResponse | PlainMessage<GetAffectedAppsResponse> | undefined): boolean {
    return proto3.util.equals(GetAffectedAppsResponse, a, b);
  }
}

/**
 * @generated from message changes.UpdateChangingItemsRequest
 */
export class UpdateChangingItemsRequest extends Message<UpdateChangingItemsRequest> {
  /**
   * The change to update
   *
   * @generated from field: bytes changeUUID = 1;
   */
  changeUUID = new Uint8Array(0);

  /**
   * References to the items that are changing
   *
   * @generated from field: repeated Reference changingItems = 2;
   */
  changingItems: Reference[] = [];

  constructor(data?: PartialMessage<UpdateChangingItemsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.UpdateChangingItemsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "changingItems", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateChangingItemsRequest {
    return new UpdateChangingItemsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateChangingItemsRequest {
    return new UpdateChangingItemsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateChangingItemsRequest {
    return new UpdateChangingItemsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateChangingItemsRequest | PlainMessage<UpdateChangingItemsRequest> | undefined, b: UpdateChangingItemsRequest | PlainMessage<UpdateChangingItemsRequest> | undefined): boolean {
    return proto3.util.equals(UpdateChangingItemsRequest, a, b);
  }
}

/**
 * @generated from message changes.MappedItemDiff
 */
export class MappedItemDiff extends Message<MappedItemDiff> {
  /**
   * The item that is changing and any known changes to it
   *
   * @generated from field: changes.ItemDiff item = 1;
   */
  item?: ItemDiff;

  /**
   * a mapping query that can be used to find the item. this can be empty if the
   * submitter does not know how to map this item.
   *
   * @generated from field: optional Query mappingQuery = 2;
   */
  mappingQuery?: Query;

  constructor(data?: PartialMessage<MappedItemDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.MappedItemDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: ItemDiff },
    { no: 2, name: "mappingQuery", kind: "message", T: Query, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MappedItemDiff {
    return new MappedItemDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MappedItemDiff {
    return new MappedItemDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MappedItemDiff {
    return new MappedItemDiff().fromJsonString(jsonString, options);
  }

  static equals(a: MappedItemDiff | PlainMessage<MappedItemDiff> | undefined, b: MappedItemDiff | PlainMessage<MappedItemDiff> | undefined): boolean {
    return proto3.util.equals(MappedItemDiff, a, b);
  }
}

/**
 * @generated from message changes.UpdatePlannedChangesRequest
 */
export class UpdatePlannedChangesRequest extends Message<UpdatePlannedChangesRequest> {
  /**
   * The change to update
   *
   * @generated from field: bytes changeUUID = 1;
   */
  changeUUID = new Uint8Array(0);

  /**
   * the changing items
   *
   * @generated from field: repeated changes.MappedItemDiff changingItems = 2;
   */
  changingItems: MappedItemDiff[] = [];

  constructor(data?: PartialMessage<UpdatePlannedChangesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.UpdatePlannedChangesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "changingItems", kind: "message", T: MappedItemDiff, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePlannedChangesRequest {
    return new UpdatePlannedChangesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePlannedChangesRequest {
    return new UpdatePlannedChangesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePlannedChangesRequest {
    return new UpdatePlannedChangesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePlannedChangesRequest | PlainMessage<UpdatePlannedChangesRequest> | undefined, b: UpdatePlannedChangesRequest | PlainMessage<UpdatePlannedChangesRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePlannedChangesRequest, a, b);
  }
}

/**
 * @generated from message changes.ListAppChangesSummaryRequest
 */
export class ListAppChangesSummaryRequest extends Message<ListAppChangesSummaryRequest> {
  /**
   * @generated from field: bytes appUUID = 1;
   */
  appUUID = new Uint8Array(0);

  constructor(data?: PartialMessage<ListAppChangesSummaryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListAppChangesSummaryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAppChangesSummaryRequest {
    return new ListAppChangesSummaryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAppChangesSummaryRequest {
    return new ListAppChangesSummaryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAppChangesSummaryRequest {
    return new ListAppChangesSummaryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAppChangesSummaryRequest | PlainMessage<ListAppChangesSummaryRequest> | undefined, b: ListAppChangesSummaryRequest | PlainMessage<ListAppChangesSummaryRequest> | undefined): boolean {
    return proto3.util.equals(ListAppChangesSummaryRequest, a, b);
  }
}

/**
 * @generated from message changes.ListAppChangesSummaryResponse
 */
export class ListAppChangesSummaryResponse extends Message<ListAppChangesSummaryResponse> {
  /**
   * @generated from field: repeated changes.ChangeSummary changes = 1;
   */
  changes: ChangeSummary[] = [];

  constructor(data?: PartialMessage<ListAppChangesSummaryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListAppChangesSummaryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changes", kind: "message", T: ChangeSummary, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAppChangesSummaryResponse {
    return new ListAppChangesSummaryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAppChangesSummaryResponse {
    return new ListAppChangesSummaryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAppChangesSummaryResponse {
    return new ListAppChangesSummaryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAppChangesSummaryResponse | PlainMessage<ListAppChangesSummaryResponse> | undefined, b: ListAppChangesSummaryResponse | PlainMessage<ListAppChangesSummaryResponse> | undefined): boolean {
    return proto3.util.equals(ListAppChangesSummaryResponse, a, b);
  }
}

/**
 * @generated from message changes.GetAppSummaryRequest
 */
export class GetAppSummaryRequest extends Message<GetAppSummaryRequest> {
  /**
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<GetAppSummaryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetAppSummaryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppSummaryRequest {
    return new GetAppSummaryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppSummaryRequest {
    return new GetAppSummaryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppSummaryRequest {
    return new GetAppSummaryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppSummaryRequest | PlainMessage<GetAppSummaryRequest> | undefined, b: GetAppSummaryRequest | PlainMessage<GetAppSummaryRequest> | undefined): boolean {
    return proto3.util.equals(GetAppSummaryRequest, a, b);
  }
}

/**
 * @generated from message changes.GetAppSummaryResponse
 */
export class GetAppSummaryResponse extends Message<GetAppSummaryResponse> {
  /**
   * @generated from field: changes.AppSummary app = 1;
   */
  app?: AppSummary;

  constructor(data?: PartialMessage<GetAppSummaryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetAppSummaryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app", kind: "message", T: AppSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppSummaryResponse {
    return new GetAppSummaryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppSummaryResponse {
    return new GetAppSummaryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppSummaryResponse {
    return new GetAppSummaryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppSummaryResponse | PlainMessage<GetAppSummaryResponse> | undefined, b: GetAppSummaryResponse | PlainMessage<GetAppSummaryResponse> | undefined): boolean {
    return proto3.util.equals(GetAppSummaryResponse, a, b);
  }
}

/**
 * @generated from message changes.GetAppSummariesRequest
 */
export class GetAppSummariesRequest extends Message<GetAppSummariesRequest> {
  /**
   * @generated from field: repeated bytes UUIDs = 1;
   */
  UUIDs: Uint8Array[] = [];

  constructor(data?: PartialMessage<GetAppSummariesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetAppSummariesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUIDs", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppSummariesRequest {
    return new GetAppSummariesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppSummariesRequest {
    return new GetAppSummariesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppSummariesRequest {
    return new GetAppSummariesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppSummariesRequest | PlainMessage<GetAppSummariesRequest> | undefined, b: GetAppSummariesRequest | PlainMessage<GetAppSummariesRequest> | undefined): boolean {
    return proto3.util.equals(GetAppSummariesRequest, a, b);
  }
}

/**
 * @generated from message changes.GetAppSummariesResponse
 */
export class GetAppSummariesResponse extends Message<GetAppSummariesResponse> {
  /**
   * @generated from field: repeated changes.AppSummary apps = 1;
   */
  apps: AppSummary[] = [];

  constructor(data?: PartialMessage<GetAppSummariesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetAppSummariesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apps", kind: "message", T: AppSummary, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppSummariesResponse {
    return new GetAppSummariesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppSummariesResponse {
    return new GetAppSummariesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppSummariesResponse {
    return new GetAppSummariesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppSummariesResponse | PlainMessage<GetAppSummariesResponse> | undefined, b: GetAppSummariesResponse | PlainMessage<GetAppSummariesResponse> | undefined): boolean {
    return proto3.util.equals(GetAppSummariesResponse, a, b);
  }
}

/**
 * @generated from message changes.ListHomeChangesRequest
 */
export class ListHomeChangesRequest extends Message<ListHomeChangesRequest> {
  constructor(data?: PartialMessage<ListHomeChangesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListHomeChangesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListHomeChangesRequest {
    return new ListHomeChangesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListHomeChangesRequest {
    return new ListHomeChangesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListHomeChangesRequest {
    return new ListHomeChangesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListHomeChangesRequest | PlainMessage<ListHomeChangesRequest> | undefined, b: ListHomeChangesRequest | PlainMessage<ListHomeChangesRequest> | undefined): boolean {
    return proto3.util.equals(ListHomeChangesRequest, a, b);
  }
}

/**
 * @generated from message changes.ListHomeChangesResponse
 */
export class ListHomeChangesResponse extends Message<ListHomeChangesResponse> {
  /**
   * @generated from field: repeated changes.ChangeSummary changes = 1;
   */
  changes: ChangeSummary[] = [];

  constructor(data?: PartialMessage<ListHomeChangesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListHomeChangesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changes", kind: "message", T: ChangeSummary, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListHomeChangesResponse {
    return new ListHomeChangesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListHomeChangesResponse {
    return new ListHomeChangesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListHomeChangesResponse {
    return new ListHomeChangesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListHomeChangesResponse | PlainMessage<ListHomeChangesResponse> | undefined, b: ListHomeChangesResponse | PlainMessage<ListHomeChangesResponse> | undefined): boolean {
    return proto3.util.equals(ListHomeChangesResponse, a, b);
  }
}

/**
 * @generated from message changes.ListHomeAppsRequest
 */
export class ListHomeAppsRequest extends Message<ListHomeAppsRequest> {
  constructor(data?: PartialMessage<ListHomeAppsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListHomeAppsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListHomeAppsRequest {
    return new ListHomeAppsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListHomeAppsRequest {
    return new ListHomeAppsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListHomeAppsRequest {
    return new ListHomeAppsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListHomeAppsRequest | PlainMessage<ListHomeAppsRequest> | undefined, b: ListHomeAppsRequest | PlainMessage<ListHomeAppsRequest> | undefined): boolean {
    return proto3.util.equals(ListHomeAppsRequest, a, b);
  }
}

/**
 * @generated from message changes.ListHomeAppsResponse
 */
export class ListHomeAppsResponse extends Message<ListHomeAppsResponse> {
  /**
   * @generated from field: repeated changes.AppSummary apps = 1;
   */
  apps: AppSummary[] = [];

  constructor(data?: PartialMessage<ListHomeAppsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListHomeAppsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apps", kind: "message", T: AppSummary, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListHomeAppsResponse {
    return new ListHomeAppsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListHomeAppsResponse {
    return new ListHomeAppsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListHomeAppsResponse {
    return new ListHomeAppsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListHomeAppsResponse | PlainMessage<ListHomeAppsResponse> | undefined, b: ListHomeAppsResponse | PlainMessage<ListHomeAppsResponse> | undefined): boolean {
    return proto3.util.equals(ListHomeAppsResponse, a, b);
  }
}

/**
 * Editor's node: I'm using references here rather than just directly
 * embedding the name, uniqueAttributeValue and scope becuase the reference
 * structs have some methods on them which it might be useful to use (like
 * `String()`), and that some methods will accept a reference as a parameter
 * and it doesn't make sense to have to re-construct one if you already have
 * all the required data
 *
 * @generated from message changes.ItemDiffSummary
 */
export class ItemDiffSummary extends Message<ItemDiffSummary> {
  /**
   * A reference to the item that this diff is related to
   *
   * @generated from field: Reference item = 1;
   */
  item?: Reference;

  /**
   * The staus of the item
   *
   * @generated from field: changes.ItemDiffStatus status = 4;
   */
  status = ItemDiffStatus.UNSPECIFIED;

  /**
   * The health of the item currently (as opposed to before the change)
   *
   * @generated from field: Health healthAfter = 5;
   */
  healthAfter = Health.UNKNOWN;

  constructor(data?: PartialMessage<ItemDiffSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ItemDiffSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: Reference },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(ItemDiffStatus) },
    { no: 5, name: "healthAfter", kind: "enum", T: proto3.getEnumType(Health) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ItemDiffSummary {
    return new ItemDiffSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ItemDiffSummary {
    return new ItemDiffSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ItemDiffSummary {
    return new ItemDiffSummary().fromJsonString(jsonString, options);
  }

  static equals(a: ItemDiffSummary | PlainMessage<ItemDiffSummary> | undefined, b: ItemDiffSummary | PlainMessage<ItemDiffSummary> | undefined): boolean {
    return proto3.util.equals(ItemDiffSummary, a, b);
  }
}

/**
 * @generated from message changes.ItemDiff
 */
export class ItemDiff extends Message<ItemDiff> {
  /**
   * A reference to the item that this diff is related to
   *
   * @generated from field: Reference item = 1;
   */
  item?: Reference;

  /**
   * The staus of the item
   *
   * @generated from field: changes.ItemDiffStatus status = 2;
   */
  status = ItemDiffStatus.UNSPECIFIED;

  /**
   * @generated from field: Item before = 3;
   */
  before?: Item;

  /**
   * @generated from field: Item after = 4;
   */
  after?: Item;

  constructor(data?: PartialMessage<ItemDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ItemDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: Reference },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(ItemDiffStatus) },
    { no: 3, name: "before", kind: "message", T: Item },
    { no: 4, name: "after", kind: "message", T: Item },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ItemDiff {
    return new ItemDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ItemDiff {
    return new ItemDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ItemDiff {
    return new ItemDiff().fromJsonString(jsonString, options);
  }

  static equals(a: ItemDiff | PlainMessage<ItemDiff> | undefined, b: ItemDiff | PlainMessage<ItemDiff> | undefined): boolean {
    return proto3.util.equals(ItemDiff, a, b);
  }
}

/**
 * @generated from message changes.AppSummary
 */
export class AppSummary extends Message<AppSummary> {
  /**
   * unique id to identify this app
   *
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  /**
   * Name of this App
   * Example: "Contoso Manager"
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Description of this App Example: "The Contoso Manager manages the contoso.
   * Notable components are storage, compute and the web. Talk to Jimmy or Susan
   * on 555-CM LEAD for more details."
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * number of changes that have affected this app
   *
   * @generated from field: int32 numChangesAffecting = 4;
   */
  numChangesAffecting = 0;

  /**
   * the number of items that make up this app
   *
   * @generated from field: int32 numItems = 5;
   */
  numItems = 0;

  /**
   * timestamp when this app was created
   *
   * @generated from field: google.protobuf.Timestamp createdAt = 6;
   */
  createdAt?: Timestamp;

  /**
   * The name of the person that created the app
   *
   * @generated from field: string creatorName = 7;
   */
  creatorName = "";

  /**
   * the url for this app. This will only be set if the app was created using
   * the `CreateSimpleApp` RPC.
   *
   * @generated from field: string url = 9;
   */
  url = "";

  /**
   * UUID of the bookmark query that returns all items in this app
   *
   * @generated from field: bytes bookmarkUUID = 10;
   */
  bookmarkUUID = new Uint8Array(0);

  constructor(data?: PartialMessage<AppSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.AppSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "numChangesAffecting", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "numItems", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "createdAt", kind: "message", T: Timestamp },
    { no: 7, name: "creatorName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "bookmarkUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppSummary {
    return new AppSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppSummary {
    return new AppSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppSummary {
    return new AppSummary().fromJsonString(jsonString, options);
  }

  static equals(a: AppSummary | PlainMessage<AppSummary> | undefined, b: AppSummary | PlainMessage<AppSummary> | undefined): boolean {
    return proto3.util.equals(AppSummary, a, b);
  }
}

/**
 * a complete App with machine-supplied and user-supplied values
 *
 * @generated from message changes.App
 */
export class App extends Message<App> {
  /**
   * machine-generated metadata of this app
   *
   * @generated from field: changes.AppMetadata metadata = 1;
   */
  metadata?: AppMetadata;

  /**
   * user-supplied properties of this app
   *
   * @generated from field: changes.AppProperties properties = 2;
   */
  properties?: AppProperties;

  constructor(data?: PartialMessage<App>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.App";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: AppMetadata },
    { no: 2, name: "properties", kind: "message", T: AppProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): App {
    return new App().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): App {
    return new App().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): App {
    return new App().fromJsonString(jsonString, options);
  }

  static equals(a: App | PlainMessage<App> | undefined, b: App | PlainMessage<App> | undefined): boolean {
    return proto3.util.equals(App, a, b);
  }
}

/**
 * machine-generated metadata of this app
 *
 * @generated from message changes.AppMetadata
 */
export class AppMetadata extends Message<AppMetadata> {
  /**
   * unique id to identify this app
   *
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  /**
   * timestamp when this app was created
   *
   * @generated from field: google.protobuf.Timestamp createdAt = 2;
   */
  createdAt?: Timestamp;

  /**
   * timestamp when this app was last updated
   *
   * @generated from field: google.protobuf.Timestamp updatedAt = 3;
   */
  updatedAt?: Timestamp;

  /**
   * items that are part of the app
   *
   * @generated from field: repeated Reference items = 4;
   */
  items: Reference[] = [];

  /**
   * the last time that the list of items was updated
   *
   * @generated from field: google.protobuf.Timestamp itemsLastUpdated = 5;
   */
  itemsLastUpdated?: Timestamp;

  /**
   * number of changes that have affected this app
   *
   * @generated from field: int32 numChangesAffecting = 6;
   */
  numChangesAffecting = 0;

  /**
   * the number of items that make up this app
   *
   * @generated from field: int32 numItems = 8;
   */
  numItems = 0;

  /**
   * the name of the person that created the app
   *
   * @generated from field: string creatorName = 7;
   */
  creatorName = "";

  /**
   * the url for this app. This will only be set if the app was created using
   * the `CreateSimpleApp` RPC.
   *
   * @generated from field: string url = 9;
   */
  url = "";

  constructor(data?: PartialMessage<AppMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.AppMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "createdAt", kind: "message", T: Timestamp },
    { no: 3, name: "updatedAt", kind: "message", T: Timestamp },
    { no: 4, name: "items", kind: "message", T: Reference, repeated: true },
    { no: 5, name: "itemsLastUpdated", kind: "message", T: Timestamp },
    { no: 6, name: "numChangesAffecting", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "numItems", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "creatorName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppMetadata {
    return new AppMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppMetadata {
    return new AppMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppMetadata {
    return new AppMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: AppMetadata | PlainMessage<AppMetadata> | undefined, b: AppMetadata | PlainMessage<AppMetadata> | undefined): boolean {
    return proto3.util.equals(AppMetadata, a, b);
  }
}

/**
 * user-supplied properties of this app
 *
 * @generated from message changes.AppProperties
 */
export class AppProperties extends Message<AppProperties> {
  /**
   * Name of this App
   * Example: "Contoso Manager"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Description of this App. Example: "The Contoso Manager manages the contoso.
   * Notable components are storage, compute and the web. Talk to Jimmy or Susan
   * on 555-CM LEAD for more details."
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * UUID of the bookmark query that returns all items in this app
   *
   * @generated from field: bytes bookmarkUUID = 3;
   */
  bookmarkUUID = new Uint8Array(0);

  constructor(data?: PartialMessage<AppProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.AppProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bookmarkUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppProperties {
    return new AppProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppProperties {
    return new AppProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppProperties {
    return new AppProperties().fromJsonString(jsonString, options);
  }

  static equals(a: AppProperties | PlainMessage<AppProperties> | undefined, b: AppProperties | PlainMessage<AppProperties> | undefined): boolean {
    return proto3.util.equals(AppProperties, a, b);
  }
}

/**
 * list all apps
 *
 * @generated from message changes.ListAppsRequest
 */
export class ListAppsRequest extends Message<ListAppsRequest> {
  constructor(data?: PartialMessage<ListAppsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListAppsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAppsRequest {
    return new ListAppsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAppsRequest {
    return new ListAppsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAppsRequest {
    return new ListAppsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAppsRequest | PlainMessage<ListAppsRequest> | undefined, b: ListAppsRequest | PlainMessage<ListAppsRequest> | undefined): boolean {
    return proto3.util.equals(ListAppsRequest, a, b);
  }
}

/**
 * @generated from message changes.ListAppsResponse
 */
export class ListAppsResponse extends Message<ListAppsResponse> {
  /**
   * @generated from field: repeated changes.App apps = 1;
   */
  apps: App[] = [];

  constructor(data?: PartialMessage<ListAppsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListAppsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apps", kind: "message", T: App, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAppsResponse {
    return new ListAppsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAppsResponse {
    return new ListAppsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAppsResponse {
    return new ListAppsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAppsResponse | PlainMessage<ListAppsResponse> | undefined, b: ListAppsResponse | PlainMessage<ListAppsResponse> | undefined): boolean {
    return proto3.util.equals(ListAppsResponse, a, b);
  }
}

/**
 * create a new app
 *
 * @generated from message changes.CreateAppRequest
 */
export class CreateAppRequest extends Message<CreateAppRequest> {
  /**
   * @generated from field: changes.AppProperties properties = 1;
   */
  properties?: AppProperties;

  constructor(data?: PartialMessage<CreateAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.CreateAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "properties", kind: "message", T: AppProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAppRequest {
    return new CreateAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAppRequest {
    return new CreateAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAppRequest {
    return new CreateAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAppRequest | PlainMessage<CreateAppRequest> | undefined, b: CreateAppRequest | PlainMessage<CreateAppRequest> | undefined): boolean {
    return proto3.util.equals(CreateAppRequest, a, b);
  }
}

/**
 * @generated from message changes.CreateAppResponse
 */
export class CreateAppResponse extends Message<CreateAppResponse> {
  /**
   * @generated from field: changes.App app = 1;
   */
  app?: App;

  constructor(data?: PartialMessage<CreateAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.CreateAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app", kind: "message", T: App },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAppResponse {
    return new CreateAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAppResponse {
    return new CreateAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAppResponse {
    return new CreateAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAppResponse | PlainMessage<CreateAppResponse> | undefined, b: CreateAppResponse | PlainMessage<CreateAppResponse> | undefined): boolean {
    return proto3.util.equals(CreateAppResponse, a, b);
  }
}

/**
 * @generated from message changes.CreateSimpleAppRequest
 */
export class CreateSimpleAppRequest extends Message<CreateSimpleAppRequest> {
  /**
   * The name of the app
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The description of the app
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * The URL of the app
   *
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<CreateSimpleAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.CreateSimpleAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSimpleAppRequest {
    return new CreateSimpleAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSimpleAppRequest {
    return new CreateSimpleAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSimpleAppRequest {
    return new CreateSimpleAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSimpleAppRequest | PlainMessage<CreateSimpleAppRequest> | undefined, b: CreateSimpleAppRequest | PlainMessage<CreateSimpleAppRequest> | undefined): boolean {
    return proto3.util.equals(CreateSimpleAppRequest, a, b);
  }
}

/**
 * @generated from message changes.CreateSimpleAppResponse
 */
export class CreateSimpleAppResponse extends Message<CreateSimpleAppResponse> {
  /**
   * @generated from field: changes.App app = 1;
   */
  app?: App;

  constructor(data?: PartialMessage<CreateSimpleAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.CreateSimpleAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app", kind: "message", T: App },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSimpleAppResponse {
    return new CreateSimpleAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSimpleAppResponse {
    return new CreateSimpleAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSimpleAppResponse {
    return new CreateSimpleAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSimpleAppResponse | PlainMessage<CreateSimpleAppResponse> | undefined, b: CreateSimpleAppResponse | PlainMessage<CreateSimpleAppResponse> | undefined): boolean {
    return proto3.util.equals(CreateSimpleAppResponse, a, b);
  }
}

/**
 * get the details of an existing app
 *
 * @generated from message changes.GetAppRequest
 */
export class GetAppRequest extends Message<GetAppRequest> {
  /**
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<GetAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppRequest {
    return new GetAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppRequest {
    return new GetAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppRequest {
    return new GetAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppRequest | PlainMessage<GetAppRequest> | undefined, b: GetAppRequest | PlainMessage<GetAppRequest> | undefined): boolean {
    return proto3.util.equals(GetAppRequest, a, b);
  }
}

/**
 * @generated from message changes.GetAppResponse
 */
export class GetAppResponse extends Message<GetAppResponse> {
  /**
   * @generated from field: changes.App app = 1;
   */
  app?: App;

  constructor(data?: PartialMessage<GetAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app", kind: "message", T: App },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppResponse {
    return new GetAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppResponse {
    return new GetAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppResponse {
    return new GetAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppResponse | PlainMessage<GetAppResponse> | undefined, b: GetAppResponse | PlainMessage<GetAppResponse> | undefined): boolean {
    return proto3.util.equals(GetAppResponse, a, b);
  }
}

/**
 * update an expsting app
 *
 * @generated from message changes.UpdateAppRequest
 */
export class UpdateAppRequest extends Message<UpdateAppRequest> {
  /**
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  /**
   * @generated from field: changes.AppProperties properties = 2;
   */
  properties?: AppProperties;

  constructor(data?: PartialMessage<UpdateAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.UpdateAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "properties", kind: "message", T: AppProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppRequest {
    return new UpdateAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppRequest {
    return new UpdateAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppRequest {
    return new UpdateAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAppRequest | PlainMessage<UpdateAppRequest> | undefined, b: UpdateAppRequest | PlainMessage<UpdateAppRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAppRequest, a, b);
  }
}

/**
 * @generated from message changes.UpdateAppResponse
 */
export class UpdateAppResponse extends Message<UpdateAppResponse> {
  /**
   * @generated from field: changes.App app = 1;
   */
  app?: App;

  constructor(data?: PartialMessage<UpdateAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.UpdateAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app", kind: "message", T: App },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppResponse {
    return new UpdateAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppResponse {
    return new UpdateAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppResponse {
    return new UpdateAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAppResponse | PlainMessage<UpdateAppResponse> | undefined, b: UpdateAppResponse | PlainMessage<UpdateAppResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAppResponse, a, b);
  }
}

/**
 * delete an app
 *
 * @generated from message changes.DeleteAppRequest
 */
export class DeleteAppRequest extends Message<DeleteAppRequest> {
  /**
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<DeleteAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.DeleteAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAppRequest | PlainMessage<DeleteAppRequest> | undefined, b: DeleteAppRequest | PlainMessage<DeleteAppRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAppRequest, a, b);
  }
}

/**
 * @generated from message changes.DeleteAppResponse
 */
export class DeleteAppResponse extends Message<DeleteAppResponse> {
  constructor(data?: PartialMessage<DeleteAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.DeleteAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAppResponse {
    return new DeleteAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAppResponse {
    return new DeleteAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAppResponse {
    return new DeleteAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAppResponse | PlainMessage<DeleteAppResponse> | undefined, b: DeleteAppResponse | PlainMessage<DeleteAppResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAppResponse, a, b);
  }
}

/**
 * list all changes for an app
 *
 * @generated from message changes.ListAppChangesRequest
 */
export class ListAppChangesRequest extends Message<ListAppChangesRequest> {
  /**
   * The UUID of the app to list changes for
   *
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<ListAppChangesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListAppChangesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAppChangesRequest {
    return new ListAppChangesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAppChangesRequest {
    return new ListAppChangesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAppChangesRequest {
    return new ListAppChangesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAppChangesRequest | PlainMessage<ListAppChangesRequest> | undefined, b: ListAppChangesRequest | PlainMessage<ListAppChangesRequest> | undefined): boolean {
    return proto3.util.equals(ListAppChangesRequest, a, b);
  }
}

/**
 * @generated from message changes.ListAppChangesResponse
 */
export class ListAppChangesResponse extends Message<ListAppChangesResponse> {
  /**
   * The list of changes related to an app
   *
   * @generated from field: repeated changes.Change changes = 1;
   */
  changes: Change[] = [];

  constructor(data?: PartialMessage<ListAppChangesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListAppChangesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changes", kind: "message", T: Change, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAppChangesResponse {
    return new ListAppChangesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAppChangesResponse {
    return new ListAppChangesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAppChangesResponse {
    return new ListAppChangesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAppChangesResponse | PlainMessage<ListAppChangesResponse> | undefined, b: ListAppChangesResponse | PlainMessage<ListAppChangesResponse> | undefined): boolean {
    return proto3.util.equals(ListAppChangesResponse, a, b);
  }
}

/**
 * A smaller summary of a change
 *
 * @generated from message changes.ChangeSummary
 */
export class ChangeSummary extends Message<ChangeSummary> {
  /**
   * unique id to identify this change
   *
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  /**
   * Short title for this change.
   * Example: "database upgrade"
   *
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * The current status of this change. This is changed by the lifecycle
   * functions such as `StartChange` and `EndChange`.
   *
   * @generated from field: changes.ChangeStatus status = 3;
   */
  status = ChangeStatus.UNSPECIFIED;

  /**
   * Link to the ticket for this change.
   * Example: "http://jira.contoso-engineering.com/browse/CM-1337"
   *
   * @generated from field: string ticketLink = 4;
   */
  ticketLink = "";

  /**
   * timestamp when this change was created
   *
   * @generated from field: google.protobuf.Timestamp createdAt = 5;
   */
  createdAt?: Timestamp;

  /**
   * The name of the user that created the change
   *
   * @generated from field: string creatorName = 6;
   */
  creatorName = "";

  /**
   * The number of apps that will be affected by this change
   *
   * @generated from field: int32 numAffectedApps = 8;
   */
  numAffectedApps = 0;

  /**
   * The number of items in the blast radius of this change
   *
   * @generated from field: int32 numAffectedItems = 9;
   */
  numAffectedItems = 0;

  /**
   * The number of edges in the blast radius of this change
   *
   * @generated from field: int32 numAffectedEdges = 10;
   */
  numAffectedEdges = 0;

  /**
   * The number of low risks in this change
   *
   * @generated from field: int32 numLowRisk = 11;
   */
  numLowRisk = 0;

  /**
   * The number of medium risks in this change
   *
   * @generated from field: int32 numMediumRisk = 12;
   */
  numMediumRisk = 0;

  /**
   * The number of high risks in this change
   *
   * @generated from field: int32 numHighRisk = 13;
   */
  numHighRisk = 0;

  constructor(data?: PartialMessage<ChangeSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ChangeSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(ChangeStatus) },
    { no: 4, name: "ticketLink", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "createdAt", kind: "message", T: Timestamp },
    { no: 6, name: "creatorName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "numAffectedApps", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "numAffectedItems", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "numAffectedEdges", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "numLowRisk", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "numMediumRisk", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "numHighRisk", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeSummary {
    return new ChangeSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeSummary {
    return new ChangeSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeSummary {
    return new ChangeSummary().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeSummary | PlainMessage<ChangeSummary> | undefined, b: ChangeSummary | PlainMessage<ChangeSummary> | undefined): boolean {
    return proto3.util.equals(ChangeSummary, a, b);
  }
}

/**
 * a complete Change with machine-supplied and user-supplied values
 *
 * @generated from message changes.Change
 */
export class Change extends Message<Change> {
  /**
   * machine-generated metadata of this change
   *
   * @generated from field: changes.ChangeMetadata metadata = 1;
   */
  metadata?: ChangeMetadata;

  /**
   * user-supplied properties of this change
   *
   * @generated from field: changes.ChangeProperties properties = 2;
   */
  properties?: ChangeProperties;

  constructor(data?: PartialMessage<Change>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.Change";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ChangeMetadata },
    { no: 2, name: "properties", kind: "message", T: ChangeProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change {
    return new Change().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJsonString(jsonString, options);
  }

  static equals(a: Change | PlainMessage<Change> | undefined, b: Change | PlainMessage<Change> | undefined): boolean {
    return proto3.util.equals(Change, a, b);
  }
}

/**
 * machine-generated metadata of this change
 *
 * @generated from message changes.ChangeMetadata
 */
export class ChangeMetadata extends Message<ChangeMetadata> {
  /**
   * unique id to identify this change
   *
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  /**
   * timestamp when this change was created
   *
   * @generated from field: google.protobuf.Timestamp createdAt = 2;
   */
  createdAt?: Timestamp;

  /**
   * timestamp when this change was last updated
   *
   * @generated from field: google.protobuf.Timestamp updatedAt = 3;
   */
  updatedAt?: Timestamp;

  /**
   * The current status of this change. This is changed by the lifecycle
   * functions such as `StartChange` and `EndChange`.
   *
   * @generated from field: changes.ChangeStatus status = 4;
   */
  status = ChangeStatus.UNSPECIFIED;

  /**
   * The name of the user that created the change
   *
   * @generated from field: string creatorName = 5;
   */
  creatorName = "";

  /**
   * The number of apps that will be affected by this change
   *
   * @generated from field: int32 numAffectedApps = 6;
   */
  numAffectedApps = 0;

  /**
   * The number of items in the blast radius if this change
   *
   * @generated from field: int32 numAffectedItems = 7;
   */
  numAffectedItems = 0;

  /**
   * The number of edges in the blast radius if this change
   *
   * @generated from field: int32 numAffectedEdges = 17;
   */
  numAffectedEdges = 0;

  /**
   * The number of items within the blast radius that were not affected by this
   * change
   *
   * @generated from field: int32 numUnchangedItems = 8;
   */
  numUnchangedItems = 0;

  /**
   * The number of items that were created as part of this change
   *
   * @generated from field: int32 numCreatedItems = 9;
   */
  numCreatedItems = 0;

  /**
   * The number of items that were updated as part of this change
   *
   * @generated from field: int32 numUpdatedItems = 10;
   */
  numUpdatedItems = 0;

  /**
   * The number of items that were replaced as part of this change
   *
   * @generated from field: int32 numReplacedItems = 18;
   */
  numReplacedItems = 0;

  /**
   * The number of items that were deleted as part of this change
   *
   * @generated from field: int32 numDeletedItems = 11;
   */
  numDeletedItems = 0;

  /**
   * @generated from field: changes.ChangeMetadata.HealthChange UnknownHealthChange = 12;
   */
  UnknownHealthChange?: ChangeMetadata_HealthChange;

  /**
   * @generated from field: changes.ChangeMetadata.HealthChange OkHealthChange = 13;
   */
  OkHealthChange?: ChangeMetadata_HealthChange;

  /**
   * @generated from field: changes.ChangeMetadata.HealthChange WarningHealthChange = 14;
   */
  WarningHealthChange?: ChangeMetadata_HealthChange;

  /**
   * @generated from field: changes.ChangeMetadata.HealthChange ErrorHealthChange = 15;
   */
  ErrorHealthChange?: ChangeMetadata_HealthChange;

  /**
   * @generated from field: changes.ChangeMetadata.HealthChange PendingHealthChange = 16;
   */
  PendingHealthChange?: ChangeMetadata_HealthChange;

  /**
   * The status of the risk calculation
   *
   * @generated from field: changes.RiskCalculationStatus riskCalculationStatus = 19;
   */
  riskCalculationStatus?: RiskCalculationStatus;

  /**
   * The risks that are related to this change
   *
   * @generated from field: repeated changes.Risk risks = 20;
   */
  risks: Risk[] = [];

  /**
   * The number of low risks in this change
   *
   * @generated from field: int32 numLowRisk = 21;
   */
  numLowRisk = 0;

  /**
   * The number of medium risks in this change
   *
   * @generated from field: int32 numMediumRisk = 22;
   */
  numMediumRisk = 0;

  /**
   * The number of high risks in this change
   *
   * @generated from field: int32 numHighRisk = 23;
   */
  numHighRisk = 0;

  /**
   * A list of references to the items that taken into account when calculating
   * risks. Due to inherent limitations in the way we calculate risks, for large
   * changes we might need to consider only a subset of the blast radius. This
   * means that risks might be missed if they relate to items that weren't
   * considered. This list is used to show the user which items were considered,
   * and which were not.
   *
   * @generated from field: repeated Reference sampledItemsForRiskCalculation = 24;
   */
  sampledItemsForRiskCalculation: Reference[] = [];

  constructor(data?: PartialMessage<ChangeMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ChangeMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "createdAt", kind: "message", T: Timestamp },
    { no: 3, name: "updatedAt", kind: "message", T: Timestamp },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(ChangeStatus) },
    { no: 5, name: "creatorName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "numAffectedApps", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "numAffectedItems", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 17, name: "numAffectedEdges", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "numUnchangedItems", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "numCreatedItems", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "numUpdatedItems", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 18, name: "numReplacedItems", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "numDeletedItems", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "UnknownHealthChange", kind: "message", T: ChangeMetadata_HealthChange },
    { no: 13, name: "OkHealthChange", kind: "message", T: ChangeMetadata_HealthChange },
    { no: 14, name: "WarningHealthChange", kind: "message", T: ChangeMetadata_HealthChange },
    { no: 15, name: "ErrorHealthChange", kind: "message", T: ChangeMetadata_HealthChange },
    { no: 16, name: "PendingHealthChange", kind: "message", T: ChangeMetadata_HealthChange },
    { no: 19, name: "riskCalculationStatus", kind: "message", T: RiskCalculationStatus },
    { no: 20, name: "risks", kind: "message", T: Risk, repeated: true },
    { no: 21, name: "numLowRisk", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 22, name: "numMediumRisk", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 23, name: "numHighRisk", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 24, name: "sampledItemsForRiskCalculation", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeMetadata {
    return new ChangeMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeMetadata {
    return new ChangeMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeMetadata {
    return new ChangeMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeMetadata | PlainMessage<ChangeMetadata> | undefined, b: ChangeMetadata | PlainMessage<ChangeMetadata> | undefined): boolean {
    return proto3.util.equals(ChangeMetadata, a, b);
  }
}

/**
 * Represents the current state of a given health state, and the amount that
 * it has changed. This doesn't just look at the change in total number of
 * items, but also the number of items that have been added and removed, even
 * if they were to add to the same number
 *
 * @generated from message changes.ChangeMetadata.HealthChange
 */
export class ChangeMetadata_HealthChange extends Message<ChangeMetadata_HealthChange> {
  /**
   * The number of items that were added to this health state as part of the
   * change
   *
   * @generated from field: int32 added = 1;
   */
  added = 0;

  /**
   * The number of items that were removed them this health state as part of
   * the change
   *
   * @generated from field: int32 removed = 2;
   */
  removed = 0;

  /**
   * The final number of items that were in this health state
   *
   * @generated from field: int32 finalTotal = 3;
   */
  finalTotal = 0;

  constructor(data?: PartialMessage<ChangeMetadata_HealthChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ChangeMetadata.HealthChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "added", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "removed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "finalTotal", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeMetadata_HealthChange {
    return new ChangeMetadata_HealthChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeMetadata_HealthChange {
    return new ChangeMetadata_HealthChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeMetadata_HealthChange {
    return new ChangeMetadata_HealthChange().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeMetadata_HealthChange | PlainMessage<ChangeMetadata_HealthChange> | undefined, b: ChangeMetadata_HealthChange | PlainMessage<ChangeMetadata_HealthChange> | undefined): boolean {
    return proto3.util.equals(ChangeMetadata_HealthChange, a, b);
  }
}

/**
 * user-supplied properties of this change
 *
 * @generated from message changes.ChangeProperties
 */
export class ChangeProperties extends Message<ChangeProperties> {
  /**
   * Short title for this change.
   * Example: "database upgrade"
   *
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * Quick description of the change.
   * Example: "upgrade of the database to get access to the new contoso management processor"
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * Link to the ticket for this change.
   * Example: "http://jira.contoso-engineering.com/browse/CM-1337"
   *
   * @generated from field: string ticketLink = 4;
   */
  ticketLink = "";

  /**
   * The owner of this change.
   * Example: Susan
   *
   * @generated from field: string owner = 5;
   */
  owner = "";

  /**
   * A comma-separated list of emails to keep updated with the status of this change.
   * Example: susan@contoso.com, jimmy@contoso.com
   *
   * @generated from field: string ccEmails = 6;
   */
  ccEmails = "";

  /**
   * UUID of a bookmark for the item queries of the items *directly* affected by
   * this change. This might be parsed from a terraform plan, added from the API,
   * parsed from a freeform ticket description etc.
   *
   * @generated from field: bytes changingItemsBookmarkUUID = 7;
   */
  changingItemsBookmarkUUID = new Uint8Array(0);

  /**
   * UUID of a snapshot for the item queries of the items *indirectly* affected
   * by this change i.e. the blast radius. The initial selection will be determined
   * automatically based off changingItemsBookmark, but can refined by the user.
   *
   * @generated from field: bytes blastRadiusSnapshotUUID = 11;
   */
  blastRadiusSnapshotUUID = new Uint8Array(0);

  /**
   * UUID of the whole-system snapshot created before the change has started.
   *
   * @generated from field: bytes systemBeforeSnapshotUUID = 8;
   */
  systemBeforeSnapshotUUID = new Uint8Array(0);

  /**
   * UUID of the whole-system snapshot created after the change has finished.
   *
   * @generated from field: bytes systemAfterSnapshotUUID = 9;
   */
  systemAfterSnapshotUUID = new Uint8Array(0);

  /**
   * list of UUIDs for apps affected by this change.
   *
   * @generated from field: repeated bytes affectedAppsUUID = 10;
   */
  affectedAppsUUID: Uint8Array[] = [];

  /**
   * a list of item diffs that were planned to be changed as part of this change. For all items that we could map, the ItemDiff.Reference will be set to the actual item found.
   *
   * @generated from field: repeated changes.ItemDiff plannedChanges = 12;
   */
  plannedChanges: ItemDiff[] = [];

  /**
   * The raw plan output for calculating the change's risks.
   *
   * @generated from field: string rawPlan = 13;
   */
  rawPlan = "";

  /**
   * The code changes of this change for calculating the change's risks.
   *
   * @generated from field: string codeChanges = 14;
   */
  codeChanges = "";

  constructor(data?: PartialMessage<ChangeProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ChangeProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ticketLink", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "ccEmails", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "changingItemsBookmarkUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "blastRadiusSnapshotUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "systemBeforeSnapshotUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "systemAfterSnapshotUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 10, name: "affectedAppsUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 12, name: "plannedChanges", kind: "message", T: ItemDiff, repeated: true },
    { no: 13, name: "rawPlan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "codeChanges", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeProperties {
    return new ChangeProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeProperties {
    return new ChangeProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeProperties {
    return new ChangeProperties().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeProperties | PlainMessage<ChangeProperties> | undefined, b: ChangeProperties | PlainMessage<ChangeProperties> | undefined): boolean {
    return proto3.util.equals(ChangeProperties, a, b);
  }
}

/**
 * list all changes
 *
 * @generated from message changes.ListChangesRequest
 */
export class ListChangesRequest extends Message<ListChangesRequest> {
  constructor(data?: PartialMessage<ListChangesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListChangesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListChangesRequest {
    return new ListChangesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListChangesRequest {
    return new ListChangesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListChangesRequest {
    return new ListChangesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListChangesRequest | PlainMessage<ListChangesRequest> | undefined, b: ListChangesRequest | PlainMessage<ListChangesRequest> | undefined): boolean {
    return proto3.util.equals(ListChangesRequest, a, b);
  }
}

/**
 * @generated from message changes.ListChangesResponse
 */
export class ListChangesResponse extends Message<ListChangesResponse> {
  /**
   * @generated from field: repeated changes.Change changes = 1;
   */
  changes: Change[] = [];

  constructor(data?: PartialMessage<ListChangesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListChangesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changes", kind: "message", T: Change, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListChangesResponse {
    return new ListChangesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListChangesResponse {
    return new ListChangesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListChangesResponse {
    return new ListChangesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListChangesResponse | PlainMessage<ListChangesResponse> | undefined, b: ListChangesResponse | PlainMessage<ListChangesResponse> | undefined): boolean {
    return proto3.util.equals(ListChangesResponse, a, b);
  }
}

/**
 * list all changes in a specific status
 *
 * @generated from message changes.ListChangesByStatusRequest
 */
export class ListChangesByStatusRequest extends Message<ListChangesByStatusRequest> {
  /**
   * @generated from field: changes.ChangeStatus status = 1;
   */
  status = ChangeStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<ListChangesByStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListChangesByStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(ChangeStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListChangesByStatusRequest {
    return new ListChangesByStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListChangesByStatusRequest {
    return new ListChangesByStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListChangesByStatusRequest {
    return new ListChangesByStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListChangesByStatusRequest | PlainMessage<ListChangesByStatusRequest> | undefined, b: ListChangesByStatusRequest | PlainMessage<ListChangesByStatusRequest> | undefined): boolean {
    return proto3.util.equals(ListChangesByStatusRequest, a, b);
  }
}

/**
 * @generated from message changes.ListChangesByStatusResponse
 */
export class ListChangesByStatusResponse extends Message<ListChangesByStatusResponse> {
  /**
   * @generated from field: repeated changes.Change changes = 1;
   */
  changes: Change[] = [];

  constructor(data?: PartialMessage<ListChangesByStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListChangesByStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changes", kind: "message", T: Change, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListChangesByStatusResponse {
    return new ListChangesByStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListChangesByStatusResponse {
    return new ListChangesByStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListChangesByStatusResponse {
    return new ListChangesByStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListChangesByStatusResponse | PlainMessage<ListChangesByStatusResponse> | undefined, b: ListChangesByStatusResponse | PlainMessage<ListChangesByStatusResponse> | undefined): boolean {
    return proto3.util.equals(ListChangesByStatusResponse, a, b);
  }
}

/**
 * create a new change
 *
 * @generated from message changes.CreateChangeRequest
 */
export class CreateChangeRequest extends Message<CreateChangeRequest> {
  /**
   * @generated from field: changes.ChangeProperties properties = 1;
   */
  properties?: ChangeProperties;

  constructor(data?: PartialMessage<CreateChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.CreateChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "properties", kind: "message", T: ChangeProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateChangeRequest {
    return new CreateChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateChangeRequest {
    return new CreateChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateChangeRequest {
    return new CreateChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateChangeRequest | PlainMessage<CreateChangeRequest> | undefined, b: CreateChangeRequest | PlainMessage<CreateChangeRequest> | undefined): boolean {
    return proto3.util.equals(CreateChangeRequest, a, b);
  }
}

/**
 * @generated from message changes.CreateChangeResponse
 */
export class CreateChangeResponse extends Message<CreateChangeResponse> {
  /**
   * @generated from field: changes.Change change = 1;
   */
  change?: Change;

  constructor(data?: PartialMessage<CreateChangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.CreateChangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "change", kind: "message", T: Change },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateChangeResponse {
    return new CreateChangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateChangeResponse {
    return new CreateChangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateChangeResponse {
    return new CreateChangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateChangeResponse | PlainMessage<CreateChangeResponse> | undefined, b: CreateChangeResponse | PlainMessage<CreateChangeResponse> | undefined): boolean {
    return proto3.util.equals(CreateChangeResponse, a, b);
  }
}

/**
 * get the details of a specific change
 *
 * @generated from message changes.GetChangeRequest
 */
export class GetChangeRequest extends Message<GetChangeRequest> {
  /**
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<GetChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangeRequest {
    return new GetChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangeRequest {
    return new GetChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangeRequest {
    return new GetChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangeRequest | PlainMessage<GetChangeRequest> | undefined, b: GetChangeRequest | PlainMessage<GetChangeRequest> | undefined): boolean {
    return proto3.util.equals(GetChangeRequest, a, b);
  }
}

/**
 * @generated from message changes.GetChangeResponse
 */
export class GetChangeResponse extends Message<GetChangeResponse> {
  /**
   * @generated from field: changes.Change change = 1;
   */
  change?: Change;

  constructor(data?: PartialMessage<GetChangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetChangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "change", kind: "message", T: Change },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangeResponse {
    return new GetChangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangeResponse {
    return new GetChangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangeResponse {
    return new GetChangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangeResponse | PlainMessage<GetChangeResponse> | undefined, b: GetChangeResponse | PlainMessage<GetChangeResponse> | undefined): boolean {
    return proto3.util.equals(GetChangeResponse, a, b);
  }
}

/**
 * update an existing change
 *
 * @generated from message changes.UpdateChangeRequest
 */
export class UpdateChangeRequest extends Message<UpdateChangeRequest> {
  /**
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  /**
   * @generated from field: changes.ChangeProperties properties = 2;
   */
  properties?: ChangeProperties;

  constructor(data?: PartialMessage<UpdateChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.UpdateChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "properties", kind: "message", T: ChangeProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateChangeRequest {
    return new UpdateChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateChangeRequest {
    return new UpdateChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateChangeRequest {
    return new UpdateChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateChangeRequest | PlainMessage<UpdateChangeRequest> | undefined, b: UpdateChangeRequest | PlainMessage<UpdateChangeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateChangeRequest, a, b);
  }
}

/**
 * @generated from message changes.UpdateChangeResponse
 */
export class UpdateChangeResponse extends Message<UpdateChangeResponse> {
  /**
   * @generated from field: changes.Change change = 1;
   */
  change?: Change;

  constructor(data?: PartialMessage<UpdateChangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.UpdateChangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "change", kind: "message", T: Change },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateChangeResponse {
    return new UpdateChangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateChangeResponse {
    return new UpdateChangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateChangeResponse {
    return new UpdateChangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateChangeResponse | PlainMessage<UpdateChangeResponse> | undefined, b: UpdateChangeResponse | PlainMessage<UpdateChangeResponse> | undefined): boolean {
    return proto3.util.equals(UpdateChangeResponse, a, b);
  }
}

/**
 * delete a change
 *
 * @generated from message changes.DeleteChangeRequest
 */
export class DeleteChangeRequest extends Message<DeleteChangeRequest> {
  /**
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<DeleteChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.DeleteChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteChangeRequest {
    return new DeleteChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteChangeRequest {
    return new DeleteChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteChangeRequest {
    return new DeleteChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteChangeRequest | PlainMessage<DeleteChangeRequest> | undefined, b: DeleteChangeRequest | PlainMessage<DeleteChangeRequest> | undefined): boolean {
    return proto3.util.equals(DeleteChangeRequest, a, b);
  }
}

/**
 * @generated from message changes.DeleteChangeResponse
 */
export class DeleteChangeResponse extends Message<DeleteChangeResponse> {
  constructor(data?: PartialMessage<DeleteChangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.DeleteChangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteChangeResponse {
    return new DeleteChangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteChangeResponse {
    return new DeleteChangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteChangeResponse {
    return new DeleteChangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteChangeResponse | PlainMessage<DeleteChangeResponse> | undefined, b: DeleteChangeResponse | PlainMessage<DeleteChangeResponse> | undefined): boolean {
    return proto3.util.equals(DeleteChangeResponse, a, b);
  }
}

/**
 * @generated from message changes.RefreshStateRequest
 */
export class RefreshStateRequest extends Message<RefreshStateRequest> {
  constructor(data?: PartialMessage<RefreshStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.RefreshStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshStateRequest {
    return new RefreshStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshStateRequest {
    return new RefreshStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshStateRequest {
    return new RefreshStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshStateRequest | PlainMessage<RefreshStateRequest> | undefined, b: RefreshStateRequest | PlainMessage<RefreshStateRequest> | undefined): boolean {
    return proto3.util.equals(RefreshStateRequest, a, b);
  }
}

/**
 * @generated from message changes.RefreshStateResponse
 */
export class RefreshStateResponse extends Message<RefreshStateResponse> {
  constructor(data?: PartialMessage<RefreshStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.RefreshStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshStateResponse {
    return new RefreshStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshStateResponse {
    return new RefreshStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshStateResponse {
    return new RefreshStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshStateResponse | PlainMessage<RefreshStateResponse> | undefined, b: RefreshStateResponse | PlainMessage<RefreshStateResponse> | undefined): boolean {
    return proto3.util.equals(RefreshStateResponse, a, b);
  }
}

/**
 * @generated from message changes.CalculateBlastRadiusRequest
 */
export class CalculateBlastRadiusRequest extends Message<CalculateBlastRadiusRequest> {
  /**
   * ID of the change to calculate the blast radius for.
   *
   * @generated from field: bytes changeUUID = 1;
   */
  changeUUID = new Uint8Array(0);

  /**
   * If true, the blast radius will be calculated again, even if it was already.
   * Otherwise if the blast radius has already been calculated (i.e. the status
   * is `DEFINING` and `blastRadiusBookmarkUUID` is set) an error will be
   * returned.
   *
   * @generated from field: bool force = 2;
   */
  force = false;

  constructor(data?: PartialMessage<CalculateBlastRadiusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.CalculateBlastRadiusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CalculateBlastRadiusRequest {
    return new CalculateBlastRadiusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CalculateBlastRadiusRequest {
    return new CalculateBlastRadiusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CalculateBlastRadiusRequest {
    return new CalculateBlastRadiusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CalculateBlastRadiusRequest | PlainMessage<CalculateBlastRadiusRequest> | undefined, b: CalculateBlastRadiusRequest | PlainMessage<CalculateBlastRadiusRequest> | undefined): boolean {
    return proto3.util.equals(CalculateBlastRadiusRequest, a, b);
  }
}

/**
 * @generated from message changes.CalculateBlastRadiusResponse
 */
export class CalculateBlastRadiusResponse extends Message<CalculateBlastRadiusResponse> {
  /**
   * @generated from field: changes.CalculateBlastRadiusResponse.State state = 1;
   */
  state = CalculateBlastRadiusResponse_State.UNSPECIFIED;

  /**
   * @generated from field: uint32 numItems = 2;
   */
  numItems = 0;

  /**
   * @generated from field: uint32 numEdges = 3;
   */
  numEdges = 0;

  constructor(data?: PartialMessage<CalculateBlastRadiusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.CalculateBlastRadiusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(CalculateBlastRadiusResponse_State) },
    { no: 2, name: "numItems", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "numEdges", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CalculateBlastRadiusResponse {
    return new CalculateBlastRadiusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CalculateBlastRadiusResponse {
    return new CalculateBlastRadiusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CalculateBlastRadiusResponse {
    return new CalculateBlastRadiusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CalculateBlastRadiusResponse | PlainMessage<CalculateBlastRadiusResponse> | undefined, b: CalculateBlastRadiusResponse | PlainMessage<CalculateBlastRadiusResponse> | undefined): boolean {
    return proto3.util.equals(CalculateBlastRadiusResponse, a, b);
  }
}

/**
 * @generated from enum changes.CalculateBlastRadiusResponse.State
 */
export enum CalculateBlastRadiusResponse_State {
  /**
   * No state has been specified
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The blast radius is being calculated.
   *
   * @generated from enum value: STATE_DISCOVERING = 1;
   */
  DISCOVERING = 1,

  /**
   * The blast radius has been calculated and is being saved
   *
   * @generated from enum value: STATE_SAVING = 2;
   */
  SAVING = 2,

  /**
   * Determining which apps are within the blast radius
   *
   * @generated from enum value: STATE_FINDING_APPS = 3;
   */
  FINDING_APPS = 3,

  /**
   * Everything is complete
   *
   * @generated from enum value: STATE_DONE = 4;
   */
  DONE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(CalculateBlastRadiusResponse_State)
proto3.util.setEnumType(CalculateBlastRadiusResponse_State, "changes.CalculateBlastRadiusResponse.State", [
  { no: 0, name: "STATE_UNSPECIFIED" },
  { no: 1, name: "STATE_DISCOVERING" },
  { no: 2, name: "STATE_SAVING" },
  { no: 3, name: "STATE_FINDING_APPS" },
  { no: 4, name: "STATE_DONE" },
]);

/**
 * @generated from message changes.StartChangeRequest
 */
export class StartChangeRequest extends Message<StartChangeRequest> {
  /**
   * @generated from field: bytes changeUUID = 1;
   */
  changeUUID = new Uint8Array(0);

  constructor(data?: PartialMessage<StartChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.StartChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartChangeRequest {
    return new StartChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartChangeRequest {
    return new StartChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartChangeRequest {
    return new StartChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartChangeRequest | PlainMessage<StartChangeRequest> | undefined, b: StartChangeRequest | PlainMessage<StartChangeRequest> | undefined): boolean {
    return proto3.util.equals(StartChangeRequest, a, b);
  }
}

/**
 * @generated from message changes.StartChangeResponse
 */
export class StartChangeResponse extends Message<StartChangeResponse> {
  /**
   * @generated from field: changes.StartChangeResponse.State state = 1;
   */
  state = StartChangeResponse_State.UNSPECIFIED;

  /**
   * @generated from field: uint32 numItems = 2;
   */
  numItems = 0;

  /**
   * @generated from field: uint32 NumEdges = 3;
   */
  NumEdges = 0;

  constructor(data?: PartialMessage<StartChangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.StartChangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(StartChangeResponse_State) },
    { no: 2, name: "numItems", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "NumEdges", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartChangeResponse {
    return new StartChangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartChangeResponse {
    return new StartChangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartChangeResponse {
    return new StartChangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartChangeResponse | PlainMessage<StartChangeResponse> | undefined, b: StartChangeResponse | PlainMessage<StartChangeResponse> | undefined): boolean {
    return proto3.util.equals(StartChangeResponse, a, b);
  }
}

/**
 * @generated from enum changes.StartChangeResponse.State
 */
export enum StartChangeResponse_State {
  /**
   * No state has been specified
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Snapshot is being taken
   *
   * @generated from enum value: STATE_TAKING_SNAPSHOT = 1;
   */
  TAKING_SNAPSHOT = 1,

  /**
   * Snapshot is being saved
   *
   * @generated from enum value: STATE_SAVING_SNAPSHOT = 2;
   */
  SAVING_SNAPSHOT = 2,

  /**
   * Everything is complete
   *
   * @generated from enum value: STATE_DONE = 3;
   */
  DONE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(StartChangeResponse_State)
proto3.util.setEnumType(StartChangeResponse_State, "changes.StartChangeResponse.State", [
  { no: 0, name: "STATE_UNSPECIFIED" },
  { no: 1, name: "STATE_TAKING_SNAPSHOT" },
  { no: 2, name: "STATE_SAVING_SNAPSHOT" },
  { no: 3, name: "STATE_DONE" },
]);

/**
 * @generated from message changes.EndChangeRequest
 */
export class EndChangeRequest extends Message<EndChangeRequest> {
  /**
   * @generated from field: bytes changeUUID = 1;
   */
  changeUUID = new Uint8Array(0);

  constructor(data?: PartialMessage<EndChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.EndChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndChangeRequest {
    return new EndChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndChangeRequest {
    return new EndChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndChangeRequest {
    return new EndChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EndChangeRequest | PlainMessage<EndChangeRequest> | undefined, b: EndChangeRequest | PlainMessage<EndChangeRequest> | undefined): boolean {
    return proto3.util.equals(EndChangeRequest, a, b);
  }
}

/**
 * @generated from message changes.EndChangeResponse
 */
export class EndChangeResponse extends Message<EndChangeResponse> {
  /**
   * @generated from field: changes.EndChangeResponse.State state = 1;
   */
  state = EndChangeResponse_State.UNSPECIFIED;

  /**
   * @generated from field: uint32 numItems = 2;
   */
  numItems = 0;

  /**
   * @generated from field: uint32 NumEdges = 3;
   */
  NumEdges = 0;

  constructor(data?: PartialMessage<EndChangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.EndChangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(EndChangeResponse_State) },
    { no: 2, name: "numItems", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "NumEdges", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndChangeResponse {
    return new EndChangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndChangeResponse {
    return new EndChangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndChangeResponse {
    return new EndChangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EndChangeResponse | PlainMessage<EndChangeResponse> | undefined, b: EndChangeResponse | PlainMessage<EndChangeResponse> | undefined): boolean {
    return proto3.util.equals(EndChangeResponse, a, b);
  }
}

/**
 * @generated from enum changes.EndChangeResponse.State
 */
export enum EndChangeResponse_State {
  /**
   * No state has been specified
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Snapshot is being taken
   *
   * @generated from enum value: STATE_TAKING_SNAPSHOT = 1;
   */
  TAKING_SNAPSHOT = 1,

  /**
   * Snapshot is being saved
   *
   * @generated from enum value: STATE_SAVING_SNAPSHOT = 2;
   */
  SAVING_SNAPSHOT = 2,

  /**
   * Everything is complete
   *
   * @generated from enum value: STATE_DONE = 3;
   */
  DONE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(EndChangeResponse_State)
proto3.util.setEnumType(EndChangeResponse_State, "changes.EndChangeResponse.State", [
  { no: 0, name: "STATE_UNSPECIFIED" },
  { no: 1, name: "STATE_TAKING_SNAPSHOT" },
  { no: 2, name: "STATE_SAVING_SNAPSHOT" },
  { no: 3, name: "STATE_DONE" },
]);

/**
 * complete Onboarding information with machine-supplied and user-supplied values
 *
 * @generated from message changes.Onboarding
 */
export class Onboarding extends Message<Onboarding> {
  /**
   * machine-generated metadata of this onboarding info
   *
   * @generated from field: changes.OnboardingMetadata metadata = 1;
   */
  metadata?: OnboardingMetadata;

  /**
   * user-supplied properties of this onboarding info
   *
   * @generated from field: changes.OnboardingProperties properties = 2;
   */
  properties?: OnboardingProperties;

  constructor(data?: PartialMessage<Onboarding>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.Onboarding";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: OnboardingMetadata },
    { no: 2, name: "properties", kind: "message", T: OnboardingProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Onboarding {
    return new Onboarding().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Onboarding {
    return new Onboarding().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Onboarding {
    return new Onboarding().fromJsonString(jsonString, options);
  }

  static equals(a: Onboarding | PlainMessage<Onboarding> | undefined, b: Onboarding | PlainMessage<Onboarding> | undefined): boolean {
    return proto3.util.equals(Onboarding, a, b);
  }
}

/**
 * machine-generated metadata of this onboarding info
 *
 * @generated from message changes.OnboardingMetadata
 */
export class OnboardingMetadata extends Message<OnboardingMetadata> {
  /**
   * timestamp when this onboarding info was created
   *
   * @generated from field: google.protobuf.Timestamp created = 2;
   */
  created?: Timestamp;

  /**
   * whether or not the user already has an AWS source configured
   *
   * @generated from field: bool hasAwsSource = 3;
   */
  hasAwsSource = false;

  constructor(data?: PartialMessage<OnboardingMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.OnboardingMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "created", kind: "message", T: Timestamp },
    { no: 3, name: "hasAwsSource", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnboardingMetadata {
    return new OnboardingMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnboardingMetadata {
    return new OnboardingMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnboardingMetadata {
    return new OnboardingMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: OnboardingMetadata | PlainMessage<OnboardingMetadata> | undefined, b: OnboardingMetadata | PlainMessage<OnboardingMetadata> | undefined): boolean {
    return proto3.util.equals(OnboardingMetadata, a, b);
  }
}

/**
 * user-supplied properties of this onboarding info
 *
 * @generated from message changes.OnboardingProperties
 */
export class OnboardingProperties extends Message<OnboardingProperties> {
  /**
   * The current status of this onboarding info.
   *
   * @generated from field: changes.OnboardingStatus status = 1;
   */
  status = OnboardingStatus.UNSPECIFIED;

  /**
   * The UUID for the aws-source that was configured as part of onboarding
   *
   * @generated from field: bytes awsSourceUUID = 2;
   */
  awsSourceUUID = new Uint8Array(0);

  /**
   * The UUID of the app that was created as part of onboarding
   *
   * @generated from field: bytes appUUID = 3;
   */
  appUUID = new Uint8Array(0);

  /**
   * The UUID of the change that was created as part of onboarding
   *
   * @generated from field: bytes changeUUID = 4;
   */
  changeUUID = new Uint8Array(0);

  constructor(data?: PartialMessage<OnboardingProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.OnboardingProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(OnboardingStatus) },
    { no: 2, name: "awsSourceUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "appUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "changeUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnboardingProperties {
    return new OnboardingProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnboardingProperties {
    return new OnboardingProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnboardingProperties {
    return new OnboardingProperties().fromJsonString(jsonString, options);
  }

  static equals(a: OnboardingProperties | PlainMessage<OnboardingProperties> | undefined, b: OnboardingProperties | PlainMessage<OnboardingProperties> | undefined): boolean {
    return proto3.util.equals(OnboardingProperties, a, b);
  }
}

/**
 * get the onboarding status
 *
 * @generated from message changes.GetOnboardingRequest
 */
export class GetOnboardingRequest extends Message<GetOnboardingRequest> {
  constructor(data?: PartialMessage<GetOnboardingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetOnboardingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOnboardingRequest {
    return new GetOnboardingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOnboardingRequest {
    return new GetOnboardingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOnboardingRequest {
    return new GetOnboardingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOnboardingRequest | PlainMessage<GetOnboardingRequest> | undefined, b: GetOnboardingRequest | PlainMessage<GetOnboardingRequest> | undefined): boolean {
    return proto3.util.equals(GetOnboardingRequest, a, b);
  }
}

/**
 * @generated from message changes.GetOnboardingResponse
 */
export class GetOnboardingResponse extends Message<GetOnboardingResponse> {
  /**
   * @generated from field: changes.Onboarding onboarding = 1;
   */
  onboarding?: Onboarding;

  constructor(data?: PartialMessage<GetOnboardingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetOnboardingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "onboarding", kind: "message", T: Onboarding },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOnboardingResponse {
    return new GetOnboardingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOnboardingResponse {
    return new GetOnboardingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOnboardingResponse {
    return new GetOnboardingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOnboardingResponse | PlainMessage<GetOnboardingResponse> | undefined, b: GetOnboardingResponse | PlainMessage<GetOnboardingResponse> | undefined): boolean {
    return proto3.util.equals(GetOnboardingResponse, a, b);
  }
}

/**
 * update onboarding status
 *
 * @generated from message changes.UpdateOnboardingRequest
 */
export class UpdateOnboardingRequest extends Message<UpdateOnboardingRequest> {
  /**
   * @generated from field: changes.OnboardingProperties properties = 2;
   */
  properties?: OnboardingProperties;

  constructor(data?: PartialMessage<UpdateOnboardingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.UpdateOnboardingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "properties", kind: "message", T: OnboardingProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOnboardingRequest {
    return new UpdateOnboardingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOnboardingRequest {
    return new UpdateOnboardingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOnboardingRequest {
    return new UpdateOnboardingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOnboardingRequest | PlainMessage<UpdateOnboardingRequest> | undefined, b: UpdateOnboardingRequest | PlainMessage<UpdateOnboardingRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOnboardingRequest, a, b);
  }
}

/**
 * @generated from message changes.UpdateOnboardingResponse
 */
export class UpdateOnboardingResponse extends Message<UpdateOnboardingResponse> {
  /**
   * @generated from field: changes.Onboarding onboarding = 1;
   */
  onboarding?: Onboarding;

  constructor(data?: PartialMessage<UpdateOnboardingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.UpdateOnboardingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "onboarding", kind: "message", T: Onboarding },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOnboardingResponse {
    return new UpdateOnboardingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOnboardingResponse {
    return new UpdateOnboardingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOnboardingResponse {
    return new UpdateOnboardingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOnboardingResponse | PlainMessage<UpdateOnboardingResponse> | undefined, b: UpdateOnboardingResponse | PlainMessage<UpdateOnboardingResponse> | undefined): boolean {
    return proto3.util.equals(UpdateOnboardingResponse, a, b);
  }
}

/**
 * @generated from message changes.SimulateChangeRequest
 */
export class SimulateChangeRequest extends Message<SimulateChangeRequest> {
  /**
   * The ID of the change to simulate
   *
   * @generated from field: bytes changeUUID = 1;
   */
  changeUUID = new Uint8Array(0);

  constructor(data?: PartialMessage<SimulateChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.SimulateChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimulateChangeRequest {
    return new SimulateChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimulateChangeRequest {
    return new SimulateChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimulateChangeRequest {
    return new SimulateChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SimulateChangeRequest | PlainMessage<SimulateChangeRequest> | undefined, b: SimulateChangeRequest | PlainMessage<SimulateChangeRequest> | undefined): boolean {
    return proto3.util.equals(SimulateChangeRequest, a, b);
  }
}

/**
 * @generated from message changes.SimulateChangeResponse
 */
export class SimulateChangeResponse extends Message<SimulateChangeResponse> {
  /**
   * Whether the simulation is complete
   *
   * @generated from field: bool done = 1;
   */
  done = false;

  /**
   * How far through the simulation process we are. This will be pretty
   * apprioximate as it's not expected to take very long and is more to give the
   * sense of progress than to be an accurate measure
   *
   * @generated from field: uint32 percentComplete = 2;
   */
  percentComplete = 0;

  constructor(data?: PartialMessage<SimulateChangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.SimulateChangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "done", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "percentComplete", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimulateChangeResponse {
    return new SimulateChangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimulateChangeResponse {
    return new SimulateChangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimulateChangeResponse {
    return new SimulateChangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SimulateChangeResponse | PlainMessage<SimulateChangeResponse> | undefined, b: SimulateChangeResponse | PlainMessage<SimulateChangeResponse> | undefined): boolean {
    return proto3.util.equals(SimulateChangeResponse, a, b);
  }
}

/**
 * @generated from message changes.Risk
 */
export class Risk extends Message<Risk> {
  /**
   * @generated from field: bytes UUID = 5;
   */
  UUID = new Uint8Array(0);

  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: changes.Risk.Severity severity = 2;
   */
  severity = Risk_Severity.UNSPECIFIED;

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: repeated Reference relatedItems = 4;
   */
  relatedItems: Reference[] = [];

  constructor(data?: PartialMessage<Risk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.Risk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "severity", kind: "enum", T: proto3.getEnumType(Risk_Severity) },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "relatedItems", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Risk {
    return new Risk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Risk {
    return new Risk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Risk {
    return new Risk().fromJsonString(jsonString, options);
  }

  static equals(a: Risk | PlainMessage<Risk> | undefined, b: Risk | PlainMessage<Risk> | undefined): boolean {
    return proto3.util.equals(Risk, a, b);
  }
}

/**
 * @generated from enum changes.Risk.Severity
 */
export enum Risk_Severity {
  /**
   * @generated from enum value: SEVERITY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SEVERITY_LOW = 1;
   */
  LOW = 1,

  /**
   * @generated from enum value: SEVERITY_MEDIUM = 2;
   */
  MEDIUM = 2,

  /**
   * @generated from enum value: SEVERITY_HIGH = 3;
   */
  HIGH = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Risk_Severity)
proto3.util.setEnumType(Risk_Severity, "changes.Risk.Severity", [
  { no: 0, name: "SEVERITY_UNSPECIFIED" },
  { no: 1, name: "SEVERITY_LOW" },
  { no: 2, name: "SEVERITY_MEDIUM" },
  { no: 3, name: "SEVERITY_HIGH" },
]);

/**
 * @generated from message changes.RiskCalculationStatus
 */
export class RiskCalculationStatus extends Message<RiskCalculationStatus> {
  /**
   * @generated from field: changes.RiskCalculationStatus.Status status = 1;
   */
  status = RiskCalculationStatus_Status.UNSPECIFIED;

  /**
   * A message that should be rendered along with the status. This won't be
   * shown when the status is `STATUS_DONE` since nothing went wrong. But other
   * status could show this message e.g. if a calculation was skipped because
   * the user opted out or didn't have enough credits
   *
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<RiskCalculationStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.RiskCalculationStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(RiskCalculationStatus_Status) },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RiskCalculationStatus {
    return new RiskCalculationStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RiskCalculationStatus {
    return new RiskCalculationStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RiskCalculationStatus {
    return new RiskCalculationStatus().fromJsonString(jsonString, options);
  }

  static equals(a: RiskCalculationStatus | PlainMessage<RiskCalculationStatus> | undefined, b: RiskCalculationStatus | PlainMessage<RiskCalculationStatus> | undefined): boolean {
    return proto3.util.equals(RiskCalculationStatus, a, b);
  }
}

/**
 * @generated from enum changes.RiskCalculationStatus.Status
 */
export enum RiskCalculationStatus_Status {
  /**
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATUS_INPROGRESS = 1;
   */
  INPROGRESS = 1,

  /**
   * @generated from enum value: STATUS_SKIPPED = 2;
   */
  SKIPPED = 2,

  /**
   * @generated from enum value: STATUS_DONE = 3;
   */
  DONE = 3,

  /**
   * @generated from enum value: STATUS_ERROR = 4;
   */
  ERROR = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(RiskCalculationStatus_Status)
proto3.util.setEnumType(RiskCalculationStatus_Status, "changes.RiskCalculationStatus.Status", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_INPROGRESS" },
  { no: 2, name: "STATUS_SKIPPED" },
  { no: 3, name: "STATUS_DONE" },
  { no: 4, name: "STATUS_ERROR" },
]);

/**
 * @generated from message changes.ChangeArchive
 */
export class ChangeArchive extends Message<ChangeArchive> {
  /**
   * @generated from field: changes.Change Change = 1;
   */
  Change?: Change;

  /**
   * @generated from field: optional bookmarks.Bookmark changingItemsBookmark = 2;
   */
  changingItemsBookmark?: Bookmark;

  /**
   * @generated from field: optional snapshots.Snapshot blastRadiusSnapshot = 3;
   */
  blastRadiusSnapshot?: Snapshot;

  /**
   * @generated from field: optional snapshots.Snapshot systemBeforeSnapshot = 4;
   */
  systemBeforeSnapshot?: Snapshot;

  /**
   * @generated from field: optional snapshots.Snapshot systemAfterSnapshot = 5;
   */
  systemAfterSnapshot?: Snapshot;

  /**
   * @generated from field: repeated changes.App affectedApps = 6;
   */
  affectedApps: App[] = [];

  /**
   * @generated from field: repeated changes.ChangeTimelineEntry timeline = 7;
   */
  timeline: ChangeTimelineEntry[] = [];

  constructor(data?: PartialMessage<ChangeArchive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ChangeArchive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Change", kind: "message", T: Change },
    { no: 2, name: "changingItemsBookmark", kind: "message", T: Bookmark, opt: true },
    { no: 3, name: "blastRadiusSnapshot", kind: "message", T: Snapshot, opt: true },
    { no: 4, name: "systemBeforeSnapshot", kind: "message", T: Snapshot, opt: true },
    { no: 5, name: "systemAfterSnapshot", kind: "message", T: Snapshot, opt: true },
    { no: 6, name: "affectedApps", kind: "message", T: App, repeated: true },
    { no: 7, name: "timeline", kind: "message", T: ChangeTimelineEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeArchive {
    return new ChangeArchive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeArchive {
    return new ChangeArchive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeArchive {
    return new ChangeArchive().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeArchive | PlainMessage<ChangeArchive> | undefined, b: ChangeArchive | PlainMessage<ChangeArchive> | undefined): boolean {
    return proto3.util.equals(ChangeArchive, a, b);
  }
}

/**
 * @generated from message changes.GetChangeArchiveRequest
 */
export class GetChangeArchiveRequest extends Message<GetChangeArchiveRequest> {
  /**
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<GetChangeArchiveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetChangeArchiveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangeArchiveRequest {
    return new GetChangeArchiveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangeArchiveRequest {
    return new GetChangeArchiveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangeArchiveRequest {
    return new GetChangeArchiveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangeArchiveRequest | PlainMessage<GetChangeArchiveRequest> | undefined, b: GetChangeArchiveRequest | PlainMessage<GetChangeArchiveRequest> | undefined): boolean {
    return proto3.util.equals(GetChangeArchiveRequest, a, b);
  }
}

/**
 * @generated from message changes.GetChangeArchiveResponse
 */
export class GetChangeArchiveResponse extends Message<GetChangeArchiveResponse> {
  /**
   * @generated from field: changes.ChangeArchive changeArchive = 1;
   */
  changeArchive?: ChangeArchive;

  constructor(data?: PartialMessage<GetChangeArchiveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetChangeArchiveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeArchive", kind: "message", T: ChangeArchive },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangeArchiveResponse {
    return new GetChangeArchiveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangeArchiveResponse {
    return new GetChangeArchiveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangeArchiveResponse {
    return new GetChangeArchiveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangeArchiveResponse | PlainMessage<GetChangeArchiveResponse> | undefined, b: GetChangeArchiveResponse | PlainMessage<GetChangeArchiveResponse> | undefined): boolean {
    return proto3.util.equals(GetChangeArchiveResponse, a, b);
  }
}

