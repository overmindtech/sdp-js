// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension=.ts"
// @generated from file changes.proto (package changes, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Item, Reference } from "./items_pb.ts";

/**
 * @generated from enum changes.ChangeStatus
 */
export enum ChangeStatus {
  /**
   * The change has been created, but the blast radius has not yet been
   * calculated. The blast radius can be calculated using the
   * `CalculateBlastRadius` RPC.
   *
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  STATUS_UNSPECIFIED = 0,

  /**
   * The blast radius has been calculated, but the chnage has not yet started.
   * The change can be started using the `StartChange` RPC.
   *
   * @generated from enum value: STATUS_DEFINING = 1;
   */
  STATUS_DEFINING = 1,

  /**
   * The change is in progress. The change can be ended using the `EndChange`
   * RPC.
   *
   * @generated from enum value: STATUS_HAPPENING = 2;
   */
  STATUS_HAPPENING = 2,

  /**
   * The change has been ended, but the results have not yet been processed.
   *
   * @generated from enum value: STATUS_PROCESSING = 3;
   */
  STATUS_PROCESSING = 3,

  /**
   * The change has been ended and the results have been processed.
   *
   * @generated from enum value: STATUS_DONE = 4;
   */
  STATUS_DONE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(ChangeStatus)
proto3.util.setEnumType(ChangeStatus, "changes.ChangeStatus", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_DEFINING" },
  { no: 2, name: "STATUS_HAPPENING" },
  { no: 3, name: "STATUS_PROCESSING" },
  { no: 4, name: "STATUS_DONE" },
]);

/**
 * @generated from enum changes.OnboardingStatus
 */
export enum OnboardingStatus {
  /**
   * @generated from enum value: ONBOARDING_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ONBOARDING_STATUS_WELCOME_PAGE = 1;
   */
  WELCOME_PAGE = 1,

  /**
   * @generated from enum value: ONBOARDING_STATUS_CONFIGURE_AWS_INTRO = 2;
   */
  CONFIGURE_AWS_INTRO = 2,

  /**
   * @generated from enum value: ONBOARDING_STATUS_CONFIGURE_AWS_PARAMS = 3;
   */
  CONFIGURE_AWS_PARAMS = 3,

  /**
   * @generated from enum value: ONBOARDING_STATUS_CONFIGURE_AWS_SUCCESS = 4;
   */
  CONFIGURE_AWS_SUCCESS = 4,

  /**
   * @generated from enum value: ONBOARDING_STATUS_DEFINE_APP_PARAMS = 5;
   */
  DEFINE_APP_PARAMS = 5,

  /**
   * @generated from enum value: ONBOARDING_STATUS_DEMO_CHANGE_PARAMS = 6;
   */
  DEMO_CHANGE_PARAMS = 6,

  /**
   * @generated from enum value: ONBOARDING_STATUS_DEMO_CHANGE_GRAPH = 7;
   */
  DEMO_CHANGE_GRAPH = 7,

  /**
   * @generated from enum value: ONBOARDING_STATUS_SIMULATING_CHANGE = 8;
   */
  SIMULATING_CHANGE = 8,

  /**
   * @generated from enum value: ONBOARDING_STATUS_RESULTS = 9;
   */
  RESULTS = 9,

  /**
   * @generated from enum value: ONBOARDING_STATUS_DONE = 10;
   */
  DONE = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(OnboardingStatus)
proto3.util.setEnumType(OnboardingStatus, "changes.OnboardingStatus", [
  { no: 0, name: "ONBOARDING_STATUS_UNSPECIFIED" },
  { no: 1, name: "ONBOARDING_STATUS_WELCOME_PAGE" },
  { no: 2, name: "ONBOARDING_STATUS_CONFIGURE_AWS_INTRO" },
  { no: 3, name: "ONBOARDING_STATUS_CONFIGURE_AWS_PARAMS" },
  { no: 4, name: "ONBOARDING_STATUS_CONFIGURE_AWS_SUCCESS" },
  { no: 5, name: "ONBOARDING_STATUS_DEFINE_APP_PARAMS" },
  { no: 6, name: "ONBOARDING_STATUS_DEMO_CHANGE_PARAMS" },
  { no: 7, name: "ONBOARDING_STATUS_DEMO_CHANGE_GRAPH" },
  { no: 8, name: "ONBOARDING_STATUS_SIMULATING_CHANGE" },
  { no: 9, name: "ONBOARDING_STATUS_RESULTS" },
  { no: 10, name: "ONBOARDING_STATUS_DONE" },
]);

/**
 * a complete App with machine-supplied and user-supplied values
 *
 * @generated from message changes.App
 */
export class App extends Message<App> {
  /**
   * machine-generated metadata of this app
   *
   * @generated from field: changes.AppMetadata metadata = 1;
   */
  metadata?: AppMetadata;

  /**
   * user-supplied properties of this app
   *
   * @generated from field: changes.AppProperties properties = 2;
   */
  properties?: AppProperties;

  constructor(data?: PartialMessage<App>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.App";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: AppMetadata },
    { no: 2, name: "properties", kind: "message", T: AppProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): App {
    return new App().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): App {
    return new App().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): App {
    return new App().fromJsonString(jsonString, options);
  }

  static equals(a: App | PlainMessage<App> | undefined, b: App | PlainMessage<App> | undefined): boolean {
    return proto3.util.equals(App, a, b);
  }
}

/**
 * machine-generated metadata of this app
 *
 * @generated from message changes.AppMetadata
 */
export class AppMetadata extends Message<AppMetadata> {
  /**
   * unique id to identify this app
   *
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  /**
   * timestamp when this app was created
   *
   * @generated from field: google.protobuf.Timestamp createdAt = 2;
   */
  createdAt?: Timestamp;

  /**
   * timestamp when this app was last updated
   *
   * @generated from field: google.protobuf.Timestamp updatedAt = 3;
   */
  updatedAt?: Timestamp;

  /**
   * items that are part of the app
   *
   * @generated from field: repeated Reference items = 4;
   */
  items: Reference[] = [];

  /**
   * the last time that the list of items was updated
   *
   * @generated from field: google.protobuf.Timestamp itemsLastUpdated = 5;
   */
  itemsLastUpdated?: Timestamp;

  constructor(data?: PartialMessage<AppMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.AppMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "createdAt", kind: "message", T: Timestamp },
    { no: 3, name: "updatedAt", kind: "message", T: Timestamp },
    { no: 4, name: "items", kind: "message", T: Reference, repeated: true },
    { no: 5, name: "itemsLastUpdated", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppMetadata {
    return new AppMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppMetadata {
    return new AppMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppMetadata {
    return new AppMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: AppMetadata | PlainMessage<AppMetadata> | undefined, b: AppMetadata | PlainMessage<AppMetadata> | undefined): boolean {
    return proto3.util.equals(AppMetadata, a, b);
  }
}

/**
 * user-supplied properties of this app
 *
 * @generated from message changes.AppProperties
 */
export class AppProperties extends Message<AppProperties> {
  /**
   * Name of this App
   * Example: "Contoso Manager"
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Description of this App
   * Example: "The Contoso Manager manages the contoso. Notable components are storage, compute and the web. Talk to Jimmy or Susan on 555-CM LEAD for more details."
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * UUID of the bookmark query that returns all items in this app
   *
   * @generated from field: bytes bookmarkUUID = 3;
   */
  bookmarkUUID = new Uint8Array(0);

  constructor(data?: PartialMessage<AppProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.AppProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bookmarkUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppProperties {
    return new AppProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppProperties {
    return new AppProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppProperties {
    return new AppProperties().fromJsonString(jsonString, options);
  }

  static equals(a: AppProperties | PlainMessage<AppProperties> | undefined, b: AppProperties | PlainMessage<AppProperties> | undefined): boolean {
    return proto3.util.equals(AppProperties, a, b);
  }
}

/**
 * list all apps
 *
 * @generated from message changes.ListAppsRequest
 */
export class ListAppsRequest extends Message<ListAppsRequest> {
  constructor(data?: PartialMessage<ListAppsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListAppsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAppsRequest {
    return new ListAppsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAppsRequest {
    return new ListAppsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAppsRequest {
    return new ListAppsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAppsRequest | PlainMessage<ListAppsRequest> | undefined, b: ListAppsRequest | PlainMessage<ListAppsRequest> | undefined): boolean {
    return proto3.util.equals(ListAppsRequest, a, b);
  }
}

/**
 * @generated from message changes.ListAppsResponse
 */
export class ListAppsResponse extends Message<ListAppsResponse> {
  /**
   * @generated from field: repeated changes.App apps = 1;
   */
  apps: App[] = [];

  constructor(data?: PartialMessage<ListAppsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListAppsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apps", kind: "message", T: App, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAppsResponse {
    return new ListAppsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAppsResponse {
    return new ListAppsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAppsResponse {
    return new ListAppsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAppsResponse | PlainMessage<ListAppsResponse> | undefined, b: ListAppsResponse | PlainMessage<ListAppsResponse> | undefined): boolean {
    return proto3.util.equals(ListAppsResponse, a, b);
  }
}

/**
 * create a new app
 *
 * @generated from message changes.CreateAppRequest
 */
export class CreateAppRequest extends Message<CreateAppRequest> {
  /**
   * @generated from field: changes.AppProperties properties = 1;
   */
  properties?: AppProperties;

  constructor(data?: PartialMessage<CreateAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.CreateAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "properties", kind: "message", T: AppProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAppRequest {
    return new CreateAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAppRequest {
    return new CreateAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAppRequest {
    return new CreateAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAppRequest | PlainMessage<CreateAppRequest> | undefined, b: CreateAppRequest | PlainMessage<CreateAppRequest> | undefined): boolean {
    return proto3.util.equals(CreateAppRequest, a, b);
  }
}

/**
 * @generated from message changes.CreateAppResponse
 */
export class CreateAppResponse extends Message<CreateAppResponse> {
  /**
   * @generated from field: changes.App app = 1;
   */
  app?: App;

  constructor(data?: PartialMessage<CreateAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.CreateAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app", kind: "message", T: App },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAppResponse {
    return new CreateAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAppResponse {
    return new CreateAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAppResponse {
    return new CreateAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAppResponse | PlainMessage<CreateAppResponse> | undefined, b: CreateAppResponse | PlainMessage<CreateAppResponse> | undefined): boolean {
    return proto3.util.equals(CreateAppResponse, a, b);
  }
}

/**
 * get the details of an existing app
 *
 * @generated from message changes.GetAppRequest
 */
export class GetAppRequest extends Message<GetAppRequest> {
  /**
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<GetAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppRequest {
    return new GetAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppRequest {
    return new GetAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppRequest {
    return new GetAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppRequest | PlainMessage<GetAppRequest> | undefined, b: GetAppRequest | PlainMessage<GetAppRequest> | undefined): boolean {
    return proto3.util.equals(GetAppRequest, a, b);
  }
}

/**
 * @generated from message changes.GetAppResponse
 */
export class GetAppResponse extends Message<GetAppResponse> {
  /**
   * @generated from field: changes.App app = 1;
   */
  app?: App;

  constructor(data?: PartialMessage<GetAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app", kind: "message", T: App },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppResponse {
    return new GetAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppResponse {
    return new GetAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppResponse {
    return new GetAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppResponse | PlainMessage<GetAppResponse> | undefined, b: GetAppResponse | PlainMessage<GetAppResponse> | undefined): boolean {
    return proto3.util.equals(GetAppResponse, a, b);
  }
}

/**
 * update an expsting app
 *
 * @generated from message changes.UpdateAppRequest
 */
export class UpdateAppRequest extends Message<UpdateAppRequest> {
  /**
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  /**
   * @generated from field: changes.AppProperties properties = 2;
   */
  properties?: AppProperties;

  constructor(data?: PartialMessage<UpdateAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.UpdateAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "properties", kind: "message", T: AppProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppRequest {
    return new UpdateAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppRequest {
    return new UpdateAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppRequest {
    return new UpdateAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAppRequest | PlainMessage<UpdateAppRequest> | undefined, b: UpdateAppRequest | PlainMessage<UpdateAppRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAppRequest, a, b);
  }
}

/**
 * @generated from message changes.UpdateAppResponse
 */
export class UpdateAppResponse extends Message<UpdateAppResponse> {
  /**
   * @generated from field: changes.App app = 1;
   */
  app?: App;

  constructor(data?: PartialMessage<UpdateAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.UpdateAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app", kind: "message", T: App },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppResponse {
    return new UpdateAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppResponse {
    return new UpdateAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppResponse {
    return new UpdateAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAppResponse | PlainMessage<UpdateAppResponse> | undefined, b: UpdateAppResponse | PlainMessage<UpdateAppResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAppResponse, a, b);
  }
}

/**
 * delete an app
 *
 * @generated from message changes.DeleteAppRequest
 */
export class DeleteAppRequest extends Message<DeleteAppRequest> {
  /**
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<DeleteAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.DeleteAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAppRequest | PlainMessage<DeleteAppRequest> | undefined, b: DeleteAppRequest | PlainMessage<DeleteAppRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAppRequest, a, b);
  }
}

/**
 * @generated from message changes.DeleteAppResponse
 */
export class DeleteAppResponse extends Message<DeleteAppResponse> {
  constructor(data?: PartialMessage<DeleteAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.DeleteAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAppResponse {
    return new DeleteAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAppResponse {
    return new DeleteAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAppResponse {
    return new DeleteAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAppResponse | PlainMessage<DeleteAppResponse> | undefined, b: DeleteAppResponse | PlainMessage<DeleteAppResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAppResponse, a, b);
  }
}

/**
 * list all changes for an app
 *
 * @generated from message changes.ListAppChangesRequest
 */
export class ListAppChangesRequest extends Message<ListAppChangesRequest> {
  /**
   * The UUID of the app to list changes for
   *
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<ListAppChangesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListAppChangesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAppChangesRequest {
    return new ListAppChangesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAppChangesRequest {
    return new ListAppChangesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAppChangesRequest {
    return new ListAppChangesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAppChangesRequest | PlainMessage<ListAppChangesRequest> | undefined, b: ListAppChangesRequest | PlainMessage<ListAppChangesRequest> | undefined): boolean {
    return proto3.util.equals(ListAppChangesRequest, a, b);
  }
}

/**
 * @generated from message changes.ListAppChangesResponse
 */
export class ListAppChangesResponse extends Message<ListAppChangesResponse> {
  /**
   * The list of changes rel
   *
   * @generated from field: repeated changes.Change changes = 1;
   */
  changes: Change[] = [];

  constructor(data?: PartialMessage<ListAppChangesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListAppChangesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changes", kind: "message", T: Change, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAppChangesResponse {
    return new ListAppChangesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAppChangesResponse {
    return new ListAppChangesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAppChangesResponse {
    return new ListAppChangesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAppChangesResponse | PlainMessage<ListAppChangesResponse> | undefined, b: ListAppChangesResponse | PlainMessage<ListAppChangesResponse> | undefined): boolean {
    return proto3.util.equals(ListAppChangesResponse, a, b);
  }
}

/**
 * a complete Change with machine-supplied and user-supplied values
 *
 * @generated from message changes.Change
 */
export class Change extends Message<Change> {
  /**
   * machine-generated metadata of this change
   *
   * @generated from field: changes.ChangeMetadata metadata = 1;
   */
  metadata?: ChangeMetadata;

  /**
   * user-supplied properties of this change
   *
   * @generated from field: changes.ChangeProperties properties = 2;
   */
  properties?: ChangeProperties;

  constructor(data?: PartialMessage<Change>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.Change";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ChangeMetadata },
    { no: 2, name: "properties", kind: "message", T: ChangeProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change {
    return new Change().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJsonString(jsonString, options);
  }

  static equals(a: Change | PlainMessage<Change> | undefined, b: Change | PlainMessage<Change> | undefined): boolean {
    return proto3.util.equals(Change, a, b);
  }
}

/**
 * machine-generated metadata of this change
 *
 * @generated from message changes.ChangeMetadata
 */
export class ChangeMetadata extends Message<ChangeMetadata> {
  /**
   * unique id to identify this change
   *
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  /**
   * timestamp when this change was created
   *
   * @generated from field: google.protobuf.Timestamp createdAt = 2;
   */
  createdAt?: Timestamp;

  /**
   * timestamp when this change was last updated
   *
   * @generated from field: google.protobuf.Timestamp updatedAt = 3;
   */
  updatedAt?: Timestamp;

  /**
   * The current status of this change. This is changed by the lifecycle
   * functions such as `StartChange` and `EndChange`.
   *
   * @generated from field: changes.ChangeStatus status = 4;
   */
  status = ChangeStatus.STATUS_UNSPECIFIED;

  constructor(data?: PartialMessage<ChangeMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ChangeMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "createdAt", kind: "message", T: Timestamp },
    { no: 3, name: "updatedAt", kind: "message", T: Timestamp },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(ChangeStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeMetadata {
    return new ChangeMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeMetadata {
    return new ChangeMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeMetadata {
    return new ChangeMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeMetadata | PlainMessage<ChangeMetadata> | undefined, b: ChangeMetadata | PlainMessage<ChangeMetadata> | undefined): boolean {
    return proto3.util.equals(ChangeMetadata, a, b);
  }
}

/**
 * user-supplied properties of this change
 *
 * @generated from message changes.ChangeProperties
 */
export class ChangeProperties extends Message<ChangeProperties> {
  /**
   * Short title for this change.
   * Example: "database upgrade"
   *
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * Quick description of the change.
   * Example: "upgrade of the database to get access to the new contoso management processor"
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * Link to the ticket for this change.
   * Example: "http://jira.contoso-engineering.com/browse/CM-1337"
   *
   * @generated from field: string ticketLink = 4;
   */
  ticketLink = "";

  /**
   * The owner of this change.
   * Example: Susan
   *
   * @generated from field: string owner = 5;
   */
  owner = "";

  /**
   * A comma-separated list of emails to keep updated with the status of this change.
   * Example: susan@contoso.com, jimmy@contoso.com
   *
   * @generated from field: string ccEmails = 6;
   */
  ccEmails = "";

  /**
   * UUID of a bookmark for the item queries of the items *directly* affected by
   * this change. This might be parsed from a terrform plam, added from the API,
   * parsed from a freeform ticket description etc.
   *
   * @generated from field: bytes affectedItemsBookmarkUUID = 7;
   */
  affectedItemsBookmarkUUID = new Uint8Array(0);

  /**
   * UUID of a bookmark for the item queries of the items *indirectly* affected
   * by this change i.e. the blast radius. This will be determined
   * automatically, but can refined by the user.
   *
   * @generated from field: bytes blastRadiusBookmarkUUID = 11;
   */
  blastRadiusBookmarkUUID = new Uint8Array(0);

  /**
   * UUID of the whole-system snapshot created before the change has started.
   *
   * @generated from field: bytes systemBeforeSnapshotUUID = 8;
   */
  systemBeforeSnapshotUUID = new Uint8Array(0);

  /**
   * UUID of the whole-system snapshot created after the change has finished.
   *
   * @generated from field: bytes systemAfterSnapshotUUID = 9;
   */
  systemAfterSnapshotUUID = new Uint8Array(0);

  /**
   * list of UUIDs for apps affected by this change.
   *
   * @generated from field: repeated bytes affectedAppsUUID = 10;
   */
  affectedAppsUUID: Uint8Array[] = [];

  constructor(data?: PartialMessage<ChangeProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ChangeProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ticketLink", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "ccEmails", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "affectedItemsBookmarkUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "blastRadiusBookmarkUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "systemBeforeSnapshotUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "systemAfterSnapshotUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 10, name: "affectedAppsUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeProperties {
    return new ChangeProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeProperties {
    return new ChangeProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeProperties {
    return new ChangeProperties().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeProperties | PlainMessage<ChangeProperties> | undefined, b: ChangeProperties | PlainMessage<ChangeProperties> | undefined): boolean {
    return proto3.util.equals(ChangeProperties, a, b);
  }
}

/**
 * list all changes
 *
 * @generated from message changes.ListChangesRequest
 */
export class ListChangesRequest extends Message<ListChangesRequest> {
  constructor(data?: PartialMessage<ListChangesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListChangesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListChangesRequest {
    return new ListChangesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListChangesRequest {
    return new ListChangesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListChangesRequest {
    return new ListChangesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListChangesRequest | PlainMessage<ListChangesRequest> | undefined, b: ListChangesRequest | PlainMessage<ListChangesRequest> | undefined): boolean {
    return proto3.util.equals(ListChangesRequest, a, b);
  }
}

/**
 * @generated from message changes.ListChangesResponse
 */
export class ListChangesResponse extends Message<ListChangesResponse> {
  /**
   * @generated from field: repeated changes.Change changes = 1;
   */
  changes: Change[] = [];

  constructor(data?: PartialMessage<ListChangesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.ListChangesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changes", kind: "message", T: Change, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListChangesResponse {
    return new ListChangesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListChangesResponse {
    return new ListChangesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListChangesResponse {
    return new ListChangesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListChangesResponse | PlainMessage<ListChangesResponse> | undefined, b: ListChangesResponse | PlainMessage<ListChangesResponse> | undefined): boolean {
    return proto3.util.equals(ListChangesResponse, a, b);
  }
}

/**
 * create a new change
 *
 * @generated from message changes.CreateChangeRequest
 */
export class CreateChangeRequest extends Message<CreateChangeRequest> {
  /**
   * @generated from field: changes.ChangeProperties properties = 1;
   */
  properties?: ChangeProperties;

  constructor(data?: PartialMessage<CreateChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.CreateChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "properties", kind: "message", T: ChangeProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateChangeRequest {
    return new CreateChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateChangeRequest {
    return new CreateChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateChangeRequest {
    return new CreateChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateChangeRequest | PlainMessage<CreateChangeRequest> | undefined, b: CreateChangeRequest | PlainMessage<CreateChangeRequest> | undefined): boolean {
    return proto3.util.equals(CreateChangeRequest, a, b);
  }
}

/**
 * @generated from message changes.CreateChangeResponse
 */
export class CreateChangeResponse extends Message<CreateChangeResponse> {
  /**
   * @generated from field: changes.Change change = 1;
   */
  change?: Change;

  constructor(data?: PartialMessage<CreateChangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.CreateChangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "change", kind: "message", T: Change },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateChangeResponse {
    return new CreateChangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateChangeResponse {
    return new CreateChangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateChangeResponse {
    return new CreateChangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateChangeResponse | PlainMessage<CreateChangeResponse> | undefined, b: CreateChangeResponse | PlainMessage<CreateChangeResponse> | undefined): boolean {
    return proto3.util.equals(CreateChangeResponse, a, b);
  }
}

/**
 * get the details of a specific change
 *
 * @generated from message changes.GetChangeRequest
 */
export class GetChangeRequest extends Message<GetChangeRequest> {
  /**
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<GetChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangeRequest {
    return new GetChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangeRequest {
    return new GetChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangeRequest {
    return new GetChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangeRequest | PlainMessage<GetChangeRequest> | undefined, b: GetChangeRequest | PlainMessage<GetChangeRequest> | undefined): boolean {
    return proto3.util.equals(GetChangeRequest, a, b);
  }
}

/**
 * @generated from message changes.GetChangeResponse
 */
export class GetChangeResponse extends Message<GetChangeResponse> {
  /**
   * @generated from field: changes.Change change = 1;
   */
  change?: Change;

  constructor(data?: PartialMessage<GetChangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetChangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "change", kind: "message", T: Change },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangeResponse {
    return new GetChangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangeResponse {
    return new GetChangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangeResponse {
    return new GetChangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangeResponse | PlainMessage<GetChangeResponse> | undefined, b: GetChangeResponse | PlainMessage<GetChangeResponse> | undefined): boolean {
    return proto3.util.equals(GetChangeResponse, a, b);
  }
}

/**
 * update an existing change
 *
 * @generated from message changes.UpdateChangeRequest
 */
export class UpdateChangeRequest extends Message<UpdateChangeRequest> {
  /**
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  /**
   * @generated from field: changes.ChangeProperties properties = 2;
   */
  properties?: ChangeProperties;

  constructor(data?: PartialMessage<UpdateChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.UpdateChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "properties", kind: "message", T: ChangeProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateChangeRequest {
    return new UpdateChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateChangeRequest {
    return new UpdateChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateChangeRequest {
    return new UpdateChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateChangeRequest | PlainMessage<UpdateChangeRequest> | undefined, b: UpdateChangeRequest | PlainMessage<UpdateChangeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateChangeRequest, a, b);
  }
}

/**
 * @generated from message changes.UpdateChangeResponse
 */
export class UpdateChangeResponse extends Message<UpdateChangeResponse> {
  /**
   * @generated from field: changes.Change change = 1;
   */
  change?: Change;

  constructor(data?: PartialMessage<UpdateChangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.UpdateChangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "change", kind: "message", T: Change },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateChangeResponse {
    return new UpdateChangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateChangeResponse {
    return new UpdateChangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateChangeResponse {
    return new UpdateChangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateChangeResponse | PlainMessage<UpdateChangeResponse> | undefined, b: UpdateChangeResponse | PlainMessage<UpdateChangeResponse> | undefined): boolean {
    return proto3.util.equals(UpdateChangeResponse, a, b);
  }
}

/**
 * delete a change
 *
 * @generated from message changes.DeleteChangeRequest
 */
export class DeleteChangeRequest extends Message<DeleteChangeRequest> {
  /**
   * @generated from field: bytes UUID = 1;
   */
  UUID = new Uint8Array(0);

  constructor(data?: PartialMessage<DeleteChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.DeleteChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteChangeRequest {
    return new DeleteChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteChangeRequest {
    return new DeleteChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteChangeRequest {
    return new DeleteChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteChangeRequest | PlainMessage<DeleteChangeRequest> | undefined, b: DeleteChangeRequest | PlainMessage<DeleteChangeRequest> | undefined): boolean {
    return proto3.util.equals(DeleteChangeRequest, a, b);
  }
}

/**
 * @generated from message changes.DeleteChangeResponse
 */
export class DeleteChangeResponse extends Message<DeleteChangeResponse> {
  constructor(data?: PartialMessage<DeleteChangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.DeleteChangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteChangeResponse {
    return new DeleteChangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteChangeResponse {
    return new DeleteChangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteChangeResponse {
    return new DeleteChangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteChangeResponse | PlainMessage<DeleteChangeResponse> | undefined, b: DeleteChangeResponse | PlainMessage<DeleteChangeResponse> | undefined): boolean {
    return proto3.util.equals(DeleteChangeResponse, a, b);
  }
}

/**
 * @generated from message changes.CalculateBlastRadiusRequest
 */
export class CalculateBlastRadiusRequest extends Message<CalculateBlastRadiusRequest> {
  /**
   * ID of the change to calculate the blast radius for.
   *
   * @generated from field: bytes changeUUID = 1;
   */
  changeUUID = new Uint8Array(0);

  /**
   * If true, the blast radius will be calculated again, even if it was already.
   * Otherwise if the blast radius has already been calculated (i.e. the status
   * is `DEFINING` and `blastRadiusBookmarkUUID` is set) an error will be
   * returned.
   *
   * @generated from field: bool force = 2;
   */
  force = false;

  constructor(data?: PartialMessage<CalculateBlastRadiusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.CalculateBlastRadiusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CalculateBlastRadiusRequest {
    return new CalculateBlastRadiusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CalculateBlastRadiusRequest {
    return new CalculateBlastRadiusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CalculateBlastRadiusRequest {
    return new CalculateBlastRadiusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CalculateBlastRadiusRequest | PlainMessage<CalculateBlastRadiusRequest> | undefined, b: CalculateBlastRadiusRequest | PlainMessage<CalculateBlastRadiusRequest> | undefined): boolean {
    return proto3.util.equals(CalculateBlastRadiusRequest, a, b);
  }
}

/**
 * @generated from message changes.CalculateBlastRadiusResponse
 */
export class CalculateBlastRadiusResponse extends Message<CalculateBlastRadiusResponse> {
  /**
   * @generated from field: changes.CalculateBlastRadiusResponse.State state = 1;
   */
  state = CalculateBlastRadiusResponse_State.DISCOVERING;

  /**
   * @generated from field: uint32 numItems = 2;
   */
  numItems = 0;

  /**
   * @generated from field: uint32 NumEdges = 3;
   */
  NumEdges = 0;

  constructor(data?: PartialMessage<CalculateBlastRadiusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.CalculateBlastRadiusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(CalculateBlastRadiusResponse_State) },
    { no: 2, name: "numItems", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "NumEdges", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CalculateBlastRadiusResponse {
    return new CalculateBlastRadiusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CalculateBlastRadiusResponse {
    return new CalculateBlastRadiusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CalculateBlastRadiusResponse {
    return new CalculateBlastRadiusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CalculateBlastRadiusResponse | PlainMessage<CalculateBlastRadiusResponse> | undefined, b: CalculateBlastRadiusResponse | PlainMessage<CalculateBlastRadiusResponse> | undefined): boolean {
    return proto3.util.equals(CalculateBlastRadiusResponse, a, b);
  }
}

/**
 * @generated from enum changes.CalculateBlastRadiusResponse.State
 */
export enum CalculateBlastRadiusResponse_State {
  /**
   * The blast radius is being calculated.
   *
   * @generated from enum value: STATE_DISCOVERING = 0;
   */
  DISCOVERING = 0,

  /**
   * The blast radius has been calculated and is being saved
   *
   * @generated from enum value: STATE_SAVING = 1;
   */
  SAVING = 1,

  /**
   * Determining which apps are within the blast radius
   *
   * @generated from enum value: STATE_FINDING_APPS = 2;
   */
  FINDING_APPS = 2,

  /**
   * Everything is complete
   *
   * @generated from enum value: STATE_DONE = 3;
   */
  DONE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(CalculateBlastRadiusResponse_State)
proto3.util.setEnumType(CalculateBlastRadiusResponse_State, "changes.CalculateBlastRadiusResponse.State", [
  { no: 0, name: "STATE_DISCOVERING" },
  { no: 1, name: "STATE_SAVING" },
  { no: 2, name: "STATE_FINDING_APPS" },
  { no: 3, name: "STATE_DONE" },
]);

/**
 * @generated from message changes.StartChangeRequest
 */
export class StartChangeRequest extends Message<StartChangeRequest> {
  /**
   * @generated from field: bytes changeUUID = 1;
   */
  changeUUID = new Uint8Array(0);

  constructor(data?: PartialMessage<StartChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.StartChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartChangeRequest {
    return new StartChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartChangeRequest {
    return new StartChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartChangeRequest {
    return new StartChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartChangeRequest | PlainMessage<StartChangeRequest> | undefined, b: StartChangeRequest | PlainMessage<StartChangeRequest> | undefined): boolean {
    return proto3.util.equals(StartChangeRequest, a, b);
  }
}

/**
 * @generated from message changes.StartChangeResponse
 */
export class StartChangeResponse extends Message<StartChangeResponse> {
  /**
   * @generated from field: changes.StartChangeResponse.State state = 1;
   */
  state = StartChangeResponse_State.TAKING_SNAPSHOT;

  /**
   * @generated from field: uint32 numItems = 2;
   */
  numItems = 0;

  /**
   * @generated from field: uint32 NumEdges = 3;
   */
  NumEdges = 0;

  constructor(data?: PartialMessage<StartChangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.StartChangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(StartChangeResponse_State) },
    { no: 2, name: "numItems", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "NumEdges", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartChangeResponse {
    return new StartChangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartChangeResponse {
    return new StartChangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartChangeResponse {
    return new StartChangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartChangeResponse | PlainMessage<StartChangeResponse> | undefined, b: StartChangeResponse | PlainMessage<StartChangeResponse> | undefined): boolean {
    return proto3.util.equals(StartChangeResponse, a, b);
  }
}

/**
 * @generated from enum changes.StartChangeResponse.State
 */
export enum StartChangeResponse_State {
  /**
   * Snapshot is being taken
   *
   * @generated from enum value: STATE_TAKING_SNAPSHOT = 0;
   */
  TAKING_SNAPSHOT = 0,

  /**
   * Snapshot is being saved
   *
   * @generated from enum value: STATE_SAVING_SNAPSHOT = 1;
   */
  SAVING_SNAPSHOT = 1,

  /**
   * Everything is complete
   *
   * @generated from enum value: STATE_DONE = 2;
   */
  DONE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(StartChangeResponse_State)
proto3.util.setEnumType(StartChangeResponse_State, "changes.StartChangeResponse.State", [
  { no: 0, name: "STATE_TAKING_SNAPSHOT" },
  { no: 1, name: "STATE_SAVING_SNAPSHOT" },
  { no: 2, name: "STATE_DONE" },
]);

/**
 * @generated from message changes.EndChangeRequest
 */
export class EndChangeRequest extends Message<EndChangeRequest> {
  /**
   * @generated from field: bytes changeUUID = 1;
   */
  changeUUID = new Uint8Array(0);

  constructor(data?: PartialMessage<EndChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.EndChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndChangeRequest {
    return new EndChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndChangeRequest {
    return new EndChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndChangeRequest {
    return new EndChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EndChangeRequest | PlainMessage<EndChangeRequest> | undefined, b: EndChangeRequest | PlainMessage<EndChangeRequest> | undefined): boolean {
    return proto3.util.equals(EndChangeRequest, a, b);
  }
}

/**
 * @generated from message changes.EndChangeResponse
 */
export class EndChangeResponse extends Message<EndChangeResponse> {
  /**
   * @generated from field: changes.EndChangeResponse.State state = 1;
   */
  state = EndChangeResponse_State.TAKING_SNAPSHOT;

  /**
   * @generated from field: uint32 numItems = 2;
   */
  numItems = 0;

  /**
   * @generated from field: uint32 NumEdges = 3;
   */
  NumEdges = 0;

  constructor(data?: PartialMessage<EndChangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.EndChangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(EndChangeResponse_State) },
    { no: 2, name: "numItems", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "NumEdges", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndChangeResponse {
    return new EndChangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndChangeResponse {
    return new EndChangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndChangeResponse {
    return new EndChangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EndChangeResponse | PlainMessage<EndChangeResponse> | undefined, b: EndChangeResponse | PlainMessage<EndChangeResponse> | undefined): boolean {
    return proto3.util.equals(EndChangeResponse, a, b);
  }
}

/**
 * @generated from enum changes.EndChangeResponse.State
 */
export enum EndChangeResponse_State {
  /**
   * Snapshot is being taken
   *
   * @generated from enum value: STATE_TAKING_SNAPSHOT = 0;
   */
  TAKING_SNAPSHOT = 0,

  /**
   * Snapshot is being saved
   *
   * @generated from enum value: STATE_SAVING_SNAPSHOT = 1;
   */
  SAVING_SNAPSHOT = 1,

  /**
   * Everything is complete
   *
   * @generated from enum value: STATE_DONE = 2;
   */
  DONE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EndChangeResponse_State)
proto3.util.setEnumType(EndChangeResponse_State, "changes.EndChangeResponse.State", [
  { no: 0, name: "STATE_TAKING_SNAPSHOT" },
  { no: 1, name: "STATE_SAVING_SNAPSHOT" },
  { no: 2, name: "STATE_DONE" },
]);

/**
 * complete Onboarding information with machine-supplied and user-supplied values
 *
 * @generated from message changes.Onboarding
 */
export class Onboarding extends Message<Onboarding> {
  /**
   * machine-generated metadata of this onboarding info
   *
   * @generated from field: changes.OnboardingMetadata metadata = 1;
   */
  metadata?: OnboardingMetadata;

  /**
   * user-supplied properties of this onboarding info
   *
   * @generated from field: changes.OnboardingProperties properties = 2;
   */
  properties?: OnboardingProperties;

  constructor(data?: PartialMessage<Onboarding>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.Onboarding";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: OnboardingMetadata },
    { no: 2, name: "properties", kind: "message", T: OnboardingProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Onboarding {
    return new Onboarding().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Onboarding {
    return new Onboarding().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Onboarding {
    return new Onboarding().fromJsonString(jsonString, options);
  }

  static equals(a: Onboarding | PlainMessage<Onboarding> | undefined, b: Onboarding | PlainMessage<Onboarding> | undefined): boolean {
    return proto3.util.equals(Onboarding, a, b);
  }
}

/**
 * machine-generated metadata of this onboarding info
 *
 * @generated from message changes.OnboardingMetadata
 */
export class OnboardingMetadata extends Message<OnboardingMetadata> {
  /**
   * timestamp when this onboarding info was created
   *
   * @generated from field: google.protobuf.Timestamp created = 2;
   */
  created?: Timestamp;

  constructor(data?: PartialMessage<OnboardingMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.OnboardingMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "created", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnboardingMetadata {
    return new OnboardingMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnboardingMetadata {
    return new OnboardingMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnboardingMetadata {
    return new OnboardingMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: OnboardingMetadata | PlainMessage<OnboardingMetadata> | undefined, b: OnboardingMetadata | PlainMessage<OnboardingMetadata> | undefined): boolean {
    return proto3.util.equals(OnboardingMetadata, a, b);
  }
}

/**
 * user-supplied properties of this onboarding info
 *
 * @generated from message changes.OnboardingProperties
 */
export class OnboardingProperties extends Message<OnboardingProperties> {
  /**
   * The current status of this onboarding info.
   *
   * @generated from field: changes.OnboardingStatus status = 1;
   */
  status = OnboardingStatus.UNSPECIFIED;

  /**
   * The UUID for the aws-source that was configured as part of onboarding
   *
   * @generated from field: bytes awsSourceUUID = 2;
   */
  awsSourceUUID = new Uint8Array(0);

  /**
   * The UUID of the app that was created as part of onboarding
   *
   * @generated from field: bytes appUUID = 3;
   */
  appUUID = new Uint8Array(0);

  /**
   * The UUID of the change that was created as part of onboarding
   *
   * @generated from field: bytes changeUUID = 4;
   */
  changeUUID = new Uint8Array(0);

  /**
   * List of items that the user should be able to select when simulating their
   * change. These should be gathered by the frontend and should be items that
   * are within 1 link of the application that the user defined so that we know
   * we can find the app as part of the blast radius
   *
   * @generated from field: repeated Item selectableItems = 5;
   */
  selectableItems: Item[] = [];

  constructor(data?: PartialMessage<OnboardingProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.OnboardingProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(OnboardingStatus) },
    { no: 2, name: "awsSourceUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "appUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "changeUUID", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "selectableItems", kind: "message", T: Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnboardingProperties {
    return new OnboardingProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnboardingProperties {
    return new OnboardingProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnboardingProperties {
    return new OnboardingProperties().fromJsonString(jsonString, options);
  }

  static equals(a: OnboardingProperties | PlainMessage<OnboardingProperties> | undefined, b: OnboardingProperties | PlainMessage<OnboardingProperties> | undefined): boolean {
    return proto3.util.equals(OnboardingProperties, a, b);
  }
}

/**
 * get the onboarding status
 *
 * @generated from message changes.GetOnboardingRequest
 */
export class GetOnboardingRequest extends Message<GetOnboardingRequest> {
  constructor(data?: PartialMessage<GetOnboardingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetOnboardingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOnboardingRequest {
    return new GetOnboardingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOnboardingRequest {
    return new GetOnboardingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOnboardingRequest {
    return new GetOnboardingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOnboardingRequest | PlainMessage<GetOnboardingRequest> | undefined, b: GetOnboardingRequest | PlainMessage<GetOnboardingRequest> | undefined): boolean {
    return proto3.util.equals(GetOnboardingRequest, a, b);
  }
}

/**
 * @generated from message changes.GetOnboardingResponse
 */
export class GetOnboardingResponse extends Message<GetOnboardingResponse> {
  /**
   * @generated from field: changes.Onboarding onboarding = 1;
   */
  onboarding?: Onboarding;

  constructor(data?: PartialMessage<GetOnboardingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetOnboardingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "onboarding", kind: "message", T: Onboarding },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOnboardingResponse {
    return new GetOnboardingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOnboardingResponse {
    return new GetOnboardingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOnboardingResponse {
    return new GetOnboardingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOnboardingResponse | PlainMessage<GetOnboardingResponse> | undefined, b: GetOnboardingResponse | PlainMessage<GetOnboardingResponse> | undefined): boolean {
    return proto3.util.equals(GetOnboardingResponse, a, b);
  }
}

/**
 * update onboarding status
 *
 * @generated from message changes.UpdateOnboardingRequest
 */
export class UpdateOnboardingRequest extends Message<UpdateOnboardingRequest> {
  /**
   * @generated from field: changes.OnboardingProperties properties = 2;
   */
  properties?: OnboardingProperties;

  constructor(data?: PartialMessage<UpdateOnboardingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.UpdateOnboardingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "properties", kind: "message", T: OnboardingProperties },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOnboardingRequest {
    return new UpdateOnboardingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOnboardingRequest {
    return new UpdateOnboardingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOnboardingRequest {
    return new UpdateOnboardingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOnboardingRequest | PlainMessage<UpdateOnboardingRequest> | undefined, b: UpdateOnboardingRequest | PlainMessage<UpdateOnboardingRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOnboardingRequest, a, b);
  }
}

/**
 * @generated from message changes.UpdateOnboardingResponse
 */
export class UpdateOnboardingResponse extends Message<UpdateOnboardingResponse> {
  /**
   * @generated from field: changes.Onboarding onboarding = 1;
   */
  onboarding?: Onboarding;

  constructor(data?: PartialMessage<UpdateOnboardingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.UpdateOnboardingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "onboarding", kind: "message", T: Onboarding },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOnboardingResponse {
    return new UpdateOnboardingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOnboardingResponse {
    return new UpdateOnboardingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOnboardingResponse {
    return new UpdateOnboardingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOnboardingResponse | PlainMessage<UpdateOnboardingResponse> | undefined, b: UpdateOnboardingResponse | PlainMessage<UpdateOnboardingResponse> | undefined): boolean {
    return proto3.util.equals(UpdateOnboardingResponse, a, b);
  }
}

/**
 * @generated from message changes.GetChangesHomeRequest
 */
export class GetChangesHomeRequest extends Message<GetChangesHomeRequest> {
  constructor(data?: PartialMessage<GetChangesHomeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetChangesHomeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangesHomeRequest {
    return new GetChangesHomeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangesHomeRequest {
    return new GetChangesHomeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangesHomeRequest {
    return new GetChangesHomeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangesHomeRequest | PlainMessage<GetChangesHomeRequest> | undefined, b: GetChangesHomeRequest | PlainMessage<GetChangesHomeRequest> | undefined): boolean {
    return proto3.util.equals(GetChangesHomeRequest, a, b);
  }
}

/**
 * @generated from message changes.GetChangesHomeResponse
 */
export class GetChangesHomeResponse extends Message<GetChangesHomeResponse> {
  /**
   * @generated from oneof changes.GetChangesHomeResponse.data
   */
  data: {
    /**
     * @generated from field: changes.GetChangesHomeData changesHome = 1;
     */
    value: GetChangesHomeData;
    case: "changesHome";
  } | {
    /**
     * @generated from field: changes.Onboarding onboarding = 2;
     */
    value: Onboarding;
    case: "onboarding";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GetChangesHomeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetChangesHomeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changesHome", kind: "message", T: GetChangesHomeData, oneof: "data" },
    { no: 2, name: "onboarding", kind: "message", T: Onboarding, oneof: "data" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangesHomeResponse {
    return new GetChangesHomeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangesHomeResponse {
    return new GetChangesHomeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangesHomeResponse {
    return new GetChangesHomeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangesHomeResponse | PlainMessage<GetChangesHomeResponse> | undefined, b: GetChangesHomeResponse | PlainMessage<GetChangesHomeResponse> | undefined): boolean {
    return proto3.util.equals(GetChangesHomeResponse, a, b);
  }
}

/**
 * @generated from message changes.GetChangesHomeData
 */
export class GetChangesHomeData extends Message<GetChangesHomeData> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: repeated changes.Change recentChanges = 2;
   */
  recentChanges: Change[] = [];

  /**
   * @generated from field: repeated changes.App recentApps = 3;
   */
  recentApps: App[] = [];

  constructor(data?: PartialMessage<GetChangesHomeData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "changes.GetChangesHomeData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recentChanges", kind: "message", T: Change, repeated: true },
    { no: 3, name: "recentApps", kind: "message", T: App, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangesHomeData {
    return new GetChangesHomeData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangesHomeData {
    return new GetChangesHomeData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangesHomeData {
    return new GetChangesHomeData().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangesHomeData | PlainMessage<GetChangesHomeData> | undefined, b: GetChangesHomeData | PlainMessage<GetChangesHomeData> | undefined): boolean {
    return proto3.util.equals(GetChangesHomeData, a, b);
  }
}

