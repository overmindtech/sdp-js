// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file responses.proto (syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Duration } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file responses.proto.
 */
export const file_responses: GenFile = /*@__PURE__*/
  fileDesc("Cg9yZXNwb25zZXMucHJvdG8ikwEKCFJlc3BvbnNlEhEKCXJlc3BvbmRlchgBIAEoCRIeCgVzdGF0ZRgCIAEoDjIPLlJlc3BvbmRlclN0YXRlEi8KDG5leHRVcGRhdGVJbhgDIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhIMCgRVVUlEGAQgASgMEhUKDXJlc3BvbmRlclVVSUQYBSABKAwqUgoOUmVzcG9uZGVyU3RhdGUSCwoHV09SS0lORxAAEgwKCENPTVBMRVRFEAESCQoFRVJST1IQAhINCglDQU5DRUxMRUQQAxILCgdTVEFMTEVEEARCJFoiZ2l0aHViLmNvbS9vdmVybWluZHRlY2gvc2RwLWdvO3NkcGIGcHJvdG8z", [file_google_protobuf_duration]);

/**
 * Response is returned when a query is made
 *
 * @generated from message Response
 */
export type Response = Message<"Response"> & {
  /**
   * The name of the responder that is working on a response. This is purely
   * informational
   *
   * @generated from field: string responder = 1;
   */
  responder: string;

  /**
   * The state of the responder
   *
   * @generated from field: ResponderState state = 2;
   */
  state: ResponderState;

  /**
   * The timespan within which to expect the next update. (e.g. 10s) If no
   * further interim responses are received within this time the connection
   * can be considered stale and the requester may give up
   *
   * @generated from field: google.protobuf.Duration nextUpdateIn = 3;
   */
  nextUpdateIn?: Duration;

  /**
   * UUID of the item query that this response is in relation to (in binary
   * format)
   *
   * @generated from field: bytes UUID = 4;
   */
  UUID: Uint8Array;

  /**
   * The ID of the responder that is working on a response. This is used for
   * internal bookkeeping and should remain constant for the duration of a
   * request, preferably over the lifetime of the source process.
   *
   * @generated from field: bytes responderUUID = 5;
   */
  responderUUID: Uint8Array;
};

/**
 * Describes the message Response.
 * Use `create(ResponseSchema)` to create a new message.
 */
export const ResponseSchema: GenMessage<Response> = /*@__PURE__*/
  messageDesc(file_responses, 0);

/**
 * ResponderState represents the state of the responder, note that both
 * COMPLETE and ERROR are completion states i.e. do not expect any more items
 * to be returned from the query
 *
 * @generated from enum ResponderState
 */
export enum ResponderState {
  /**
   * The responder is still gathering data
   *
   * @generated from enum value: WORKING = 0;
   */
  WORKING = 0,

  /**
   * The query is complete
   *
   * @generated from enum value: COMPLETE = 1;
   */
  COMPLETE = 1,

  /**
   * All sources have returned errors
   *
   * @generated from enum value: ERROR = 2;
   */
  ERROR = 2,

  /**
   * Work has been cancelled while in progress
   *
   * @generated from enum value: CANCELLED = 3;
   */
  CANCELLED = 3,

  /**
   * The responder has not set a response in the expected interval
   *
   * @generated from enum value: STALLED = 4;
   */
  STALLED = 4,
}

/**
 * Describes the enum ResponderState.
 */
export const ResponderStateSchema: GenEnum<ResponderState> = /*@__PURE__*/
  enumDesc(file_responses, 0);

